$ADD_REPORT
!REC-ID
¶SPEC_NAME¶FINDING_AID_GENERIC
¶STATUS¶UPDATED
¶VERSION¶9.02.01
¶REVISION¶4
¶DBNAME¶DESCRIPTION
¶PAGE_WIDTH¶32000
¶DISPLAY_MODE¶8
¶PAGE_BREAK¶X
¶SPLIT_RECORD¶X
¶HANDLE_NAME¶UTF8_HANDLER
¶PAGE_FIELD¶¶PAGE_FIELD_TYPE¶1
¶PAGE_FIELD¶¶PAGE_FIELD_TYPE¶2
¶PAGE_FIELD¶¶PAGE_FIELD_TYPE¶3
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<SISN>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶SISN
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</SISN>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LEVEL_DESC>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶LEVEL_DESC
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LEVEL_DESC>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TITLE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶REFD
¶PRINT_LITERAL1¶ 
¶PRINT_LIT1_TYPE¶2
¶PRINT_LIT2_TYPE¶1
¶PRINT_COND_DISP¶X
¶PRINT_SORTOCC¶1
¶PRINT_EQ_SUPP¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶BOX_NO !+ AND FOLDER !+ AND (LEVEL_DESC == "FILE" OR LEVEL_DESC == "FILE PART" OR LEVEL_DESC == "ITEM" OR LEVEL_DESC == "COMPONENT")
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶BOX_NO
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶5
¶PRINT_EXP¶FOLDER
¶PRINT_LITERAL1¶/
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶TITLE
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TITLE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<ORIGINAL_TITLE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶TITLE
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</ORIGINAL_TITLE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<REFD>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶REFD
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</REFD>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<REFD_HIGHER>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶REFD_HIGHER
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</REFD_HIGHER>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<DATE_OF_CREATION>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶DATE_CR_INC
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</DATE_OF_CREATION>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<ARCHIVIST_DESC>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶ARCHIVIST_DESC
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</ARCHIVIST_DESC>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<PHYSICAL_DESCRIPTION>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶PHYSICAL_DESC
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶PHYSICAL_DESC
¶PRINT_LITERAL1¶, 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</PHYSICAL_DESCRIPTION>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<CREATOR_CODES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶CREATOR_CODE
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶CREATOR_CODE
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</CREATOR_CODES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<ARCHIVES_CODES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶OTHER_CODES
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶OTHER_CODES
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</ARCHIVES_CODES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TITLE_NOTES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶TITLE_NOTES
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶TITLE_NOTES
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TITLE_NOTES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶BIO_SKETCH !+ OR (INDEXPROV !+ AND (SEARCH(SEARCH_RECORDS,DB=AUTHORITY,SEARCHEXP="ADMIN_HISTORY !+",SOURCE=INDEXPROV,SEARCH=HEADING) = 0))
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶BIO_SKETCH
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Biographical Sketch/Administrative History
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶1
¶IF_EXP¶INDEXPROV !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶3
¶STATEMENT_LEVEL¶2
¶GROUP_ID¶indexprov
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶3
¶COMMON_SP_BFE¶0
¶PRINT_EXP¶INDEXPROV
¶PRINT_LITERAL1¶:  
¶PRINT_LIT1_TYPE¶2
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶F_HEIGHT¶9
¶F_WIDTH¶0
¶F_ESCAPEMENT¶0
¶F_ORIENTATION¶0
¶F_WEIGHT¶400
¶F_ITALIC¶1
¶F_UNDERLINE¶0
¶F_STRIKEOUT¶0
¶F_CHARSET¶0
¶F_OUTPRECISION¶1
¶F_CLIPPRECISION¶2
¶F_QUALITY¶1
¶F_PITCH_FAMILY¶34
¶F_FACENAME¶MS Sans Serif
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶3
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶2
¶PRINT_EXP¶PROV_ID
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_RPT_RTN¶EXPAND_FIELD_VALUE
¶PRINT_UR_PARM¶ORGANIZATION_VAL,ORG_ID,ORG_HISTORY,SKIP
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶3
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶2
¶PRINT_EXP¶PROV_ID
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_RPT_RTN¶EXPAND_FIELD_VALUE
¶PRINT_UR_PARM¶PEOPLE_VAL,PERSON_ID,PERSON_HISTORY,SKIP
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶2
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶2
¶IF_EXP¶INDEXPROV !-
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶3
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶BIO_SKETCH
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶2
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶SCOPE !+ OR SCOPE !-
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶SCOPE
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Scope and Content
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶SCOPE
¶PRINT_LIT1_TYPE¶1
¶PRINT_LIT1_REP¶X
¶PRINT_LIT2_TYPE¶1
¶PRINT_COND_DISP¶X
¶PRINT_SORTOCC¶1
¶PRINT_EQ_SUPP¶1
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶ABSTRACT !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶DESCRIPTION
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Description
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶ABSTRACT
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶CUSTODIAL_HIST !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶PROVENANCE
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Custodial History
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶CUSTODIAL_HIST
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶LANGUAGE_NOTES !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶LANGUAGES
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Languages
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶LANGUAGE_NOTES
¶PRINT_LIT1_TYPE¶1
¶PRINT_LIT2_TYPE¶1
¶PRINT_COND_DISP¶X
¶PRINT_SORTOCC¶1
¶PRINT_EQ_SUPP¶1
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶RESTRICTIONS !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶RESTRICTIONS
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Restrictions
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶RESTRICTIONS
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶ARRANGEMENT !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶ARRANGEMENT
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Arrangement
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶ARRANGEMENT
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶TITLE_NOTES !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶TITLE_NOTES
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Title Notes
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶TITLE_NOTES
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶TITLE_NOTES
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶OTHER_CODES !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶OTHER_CODES
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Other Codes
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶OTHER_CODES
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶OTHER_CODES
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶CREATOR_CODE !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<COLLECTION_INFO_GROUP REPEAT="Y">
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶CREATOR_CODES
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</TYPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶Creator Codes
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LABEL>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶1
¶COMMON_END_OCC¶1
¶PRINT_EXP¶CREATOR_CODE
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶0
¶COMMON_START_OCC¶2
¶COMMON_END_OCC¶99
¶PRINT_EXP¶CREATOR_CODE
¶PRINT_LITERAL1¶; 
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</VALUE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</COLLECTION_INFO_GROUP>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<LANGUAGE_NOTES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶LANGUAGE_NOTES
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</LANGUAGE_NOTES>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<RESTRICTIONS>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶RESTRICTIONS
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</RESTRICTIONS>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<HISTORY>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶INDEXPROV !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶3
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶2L
¶GROUP_ID¶INDEXPROV
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶2
¶COMMON_SP_BFE¶1L
¶PRINT_EXP¶INDEXPROV
¶PRINT_LITERAL1¶:  
¶PRINT_LIT1_TYPE¶2
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶2
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶2
¶PRINT_EXP¶INDEXPROV
¶PRINT_LIT1_COND¶X
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PRINT_RPT_RTN¶EXPAND_FIELD_VALUE
¶PRINT_UR_PARM¶AUTHORITY,HEADING,ADMIN_HISTORY,SKIP
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</HISTORY>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<SCOPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶SCOPE
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</SCOPE>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<ABSTRACT>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶ABSTRACT
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</ABSTRACT>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<CUSTODIAL_HIST>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶CUSTODIAL_HIST
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</CUSTODIAL_HIST>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<ARRANGEMENT>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶ARRANGEMENT
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</ARRANGEMENT>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<BOX_NO>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶BOX_NO !+ AND (LEVEL_DESC == "FILE" OR LEVEL_DESC == "FILE PART" OR LEVEL_DESC == "ITEM" OR LEVEL_DESC == "COMPONENT")
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1L
¶PRINT_EXP¶BOX_NO
¶PRINT_LIT1_REP¶X
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</BOX_NO>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<FOLDER>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶0
¶IF_EXP¶FOLDER !+ AND (LEVEL_DESC == "FILE" OR LEVEL_DESC == "FILE PART" OR LEVEL_DESC == "ITEM" OR LEVEL_DESC == "COMPONENT")
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶1
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_EXP¶FOLDER
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</FOLDER>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶<IMAGEPATH>
¶PRINT_COND_DISP¶X
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶3
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶1L
¶COMMON_OCCGAP¶1
¶GROUP_ID¶IMAGE_GROUP
¶GROUP_START_OCC¶1
¶GROUP_END_OCC¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶4
¶STATEMENT_LEVEL¶1
¶IF_EXP¶TDR_IMAGE !+
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶2
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶COMMON_OCCGAP¶1
¶PRINT_EXP¶TDR_IMAGE
¶PRINT_LIT2_TYPE¶2
¶PRINT_COND_DISP¶X
¶PRINT_JUSTIFY¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶1
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶9
¶STATEMENT_LEVEL¶0
¶PROC_STATEMENT¶¶STATEMENT_TYPE¶1
¶STATEMENT_LEVEL¶0
¶COMMON_SP_BFE¶0
¶COMMON_SP_AFTER¶0
¶PRINT_LIT_EXP¶</IMAGEPATH>
¶PRINT_COND_DISP¶X
¶SPEC_UR_PARM¶FULL_TREE_PARM=(REFD,REFD_HIGHER),PDF=Y
¶OUTPUT_TYPE¶3
¶EDITOR¶XML Report Editor
¶TEMPLATE¶[M2A_DM]xml\FINDING_AID_GENERIC.mrt
¶SPEC_CREATOR¶MINT_M2AMGR
***ENDBODY***
140443 FINDING_AID_GENERIC
ï»¿<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<StiSerializer version="1.02" type="Net" application="StiReport">
  <BeginRenderEvent>{
	levels = new Hashtable();
	double newWidth = 0.00;
	double newHeight = 0.00;
	bool ok = false;
	if (userShowNoImage == "true" &amp;&amp; userNoImage != string.Empty)
	{
		ok = getImageDimensions(userNoImage, out newWidth, out newHeight, (double)ImagesWidth, (double)ImagesWidth);
		if (ok)
		{
			noImageWidth = newWidth;
			noImageHeight = newHeight;
		}
		else if (!ok)
		{
			noImageWidth = ImagesWidth;
			noImageHeight = 0.00;
			userShowNoImage = "false";
		}
	}
}</BeginRenderEvent>
  <Dictionary Ref="1" type="Dictionary" isKey="true">
    <BusinessObjects isList="true" count="0" />
    <Databases isList="true" count="2">
      <FINDING_AID_GENERIC Ref="2" type="Stimulsoft.Report.Dictionary.StiXmlDatabase" isKey="true">
        <Alias>FINDING_AID_GENERIC</Alias>
        <Name>FINDING_AID_GENERIC</Name>
        <PathData>F:\MINISIS\MD\Erie\erieFAdata.xml</PathData>
        <PathSchema />
      </FINDING_AID_GENERIC>
      <Connection Ref="3" type="Stimulsoft.Report.Dictionary.StiXmlDatabase" isKey="true">
        <Alias>Connection</Alias>
        <Name>Connection</Name>
        <PathData>F:\MINISIS\MD\Erie\erieFAdata.xml</PathData>
        <PathSchema />
      </Connection>
    </Databases>
    <DataSources isList="true" count="2">
      <RECORD Ref="4" type="DataTableSource" isKey="true">
        <Alias>RECORD</Alias>
        <Columns isList="true" count="23">
          <value>SISN,System.String</value>
          <value>LEVEL_DESC,System.String</value>
          <value>TITLE,System.String</value>
          <value>ORIGINAL_TITLE,System.String</value>
          <value>REFD,System.String</value>
          <value>REFD_HIGHER,System.String</value>
          <value>DATE_OF_CREATION,System.String</value>
          <value>ARCHIVIST_DESC,System.String</value>
          <value>PHYSICAL_DESCRIPTION,System.String</value>
          <value>CREATOR_CODES,System.String</value>
          <value>ARCHIVES_CODES,System.String</value>
          <value>TITLE_NOTES,System.String</value>
          <value>LANGUAGE_NOTES,System.String</value>
          <value>RESTRICTIONS,System.String</value>
          <value>HISTORY,System.String</value>
          <value>SCOPE,System.String</value>
          <value>ABSTRACT,System.String</value>
          <value>CUSTODIAL_HIST,System.String</value>
          <value>ARRANGEMENT,System.String</value>
          <value>BOX_NO,System.String</value>
          <value>FOLDER,System.String</value>
          <value>IMAGEPATH,System.String</value>
          <value>RECORD_Id,System.Int32</value>
        </Columns>
        <Dictionary isRef="1" />
        <Name>RECORD</Name>
        <NameInSource>FINDING_AID_GENERIC.RECORD</NameInSource>
      </RECORD>
      <COLLECTION_INFO_GROUP Ref="5" type="DataTableSource" isKey="true">
        <Alias>COLLECTION_INFO_GROUP</Alias>
        <Columns isList="true" count="4">
          <value>TYPE,System.String</value>
          <value>LABEL,System.String</value>
          <value>VALUE,System.String</value>
          <value>RECORD_Id,System.Int32</value>
        </Columns>
        <Dictionary isRef="1" />
        <Name>COLLECTION_INFO_GROUP</Name>
        <NameInSource>FINDING_AID_GENERIC.COLLECTION_INFO_GROUP</NameInSource>
      </COLLECTION_INFO_GROUP>
    </DataSources>
    <Relations isList="true" count="1">
      <RECORD Ref="6" type="DataRelation" isKey="true">
        <Alias>RECORD</Alias>
        <ChildColumns isList="true" count="1">
          <value>RECORD_Id</value>
        </ChildColumns>
        <ChildSource isRef="5" />
        <Dictionary isRef="1" />
        <Name>RECORD</Name>
        <NameInSource>RECORD_COLLECTION_INFO_GROUP</NameInSource>
        <ParentColumns isList="true" count="1">
          <value>RECORD_Id</value>
        </ParentColumns>
        <ParentSource isRef="4" />
      </RECORD>
    </Relations>
    <Report isRef="0" />
    <Variables isList="true" count="22">
      <value>,userIndentation,userIndentation,System.String,,False,False</value>
      <value>,userShowNoImage,userShowNoImage,System.String,,False,False</value>
      <value>,userNoImage,userNoImage,System.String,,False,False</value>
      <value>,userImagePlacement,userImagePlacement,System.String,,False,False</value>
      <value>,userShowImages,userShowImages,System.String,,False,False</value>
      <value>,userShowLevelDesc,userShowLevelDesc,System.String,,False,False</value>
      <value>,userShowImagesForCollections,userShowImagesForCollections,System.String,,False,False</value>
      <value>,userShowImagesForSubgroups,userShowImagesForSubgroups,System.String,,False,False</value>
      <value>,userShowImagesForSeries,userShowImagesForSeries,System.String,,False,False</value>
      <value>,userShowImagesForSubseries,userShowImagesForSubseries,System.String,,False,False</value>
      <value>,userShowImagesForSubsubseries,userShowImagesForSubsubseries,System.String,,False,False</value>
      <value>,userShowImagesForFiles,userShowImagesForFiles,System.String,true,False,False</value>
      <value>,userShowImagesForFileparts,userShowImagesForFileparts,System.String,true,False,False</value>
      <value>,userShowImagesForItems,userShowImagesForItems,System.String,true,False,False</value>
      <value>,userShowImagesForComponents,userShowImagesForComponents,System.String,true,False,False</value>
      <value>,userIndentImages,userIndentImages,System.String,,False,False</value>
      <value>,userCollectionOrFonds,userCollectionOrFonds,System.String,,False,False</value>
      <value>,userLogo,userLogo,System.String,,False,False</value>
      <value>,userLevelsInToc,userLevelsInToc,System.String,,False,False</value>
      <value>,userLevelsInBookmarks,userLevelsInBookmarks,System.String,,False,False</value>
      <value>,userSortOrder,userSortOrder,System.String,,False,False</value>
      <value>,userPrettifyTitles,userPrettifyTitles,System.String,,False,False</value>
    </Variables>
  </Dictionary>
  <EndRenderEvent>{levels.Clear();}</EndRenderEvent>
  <EngineVersion>EngineV2</EngineVersion>
  <GlobalizationStrings isList="true" count="0" />
  <MetaTags isList="true" count="0" />
  <Pages isList="true" count="5">
    <TitlePage Ref="7" type="Page" isKey="true">
      <Border>None;Black;2;Solid;False;4;Black</Border>
      <Brush>Transparent</Brush>
      <Components isList="true" count="5">
        <PageFooter4 Ref="8" type="PageFooterBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,9.72,7.72,0.5</ClientRectangle>
          <Components isList="true" count="0" />
          <Conditions isList="true" count="0" />
          <Guid>839a366ed971499fb68f879aa5c7ecf0</Guid>
          <Name>PageFooter4</Name>
          <Page isRef="7" />
          <Parent isRef="7" />
        </PageFooter4>
        <ReportTitle1 Ref="9" type="ReportTitleBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,0.2,7.72,2.9</ClientRectangle>
          <Components isList="true" count="2">
            <Text1 Ref="10" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>2.66,2.4,2.4,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,10,Bold</Font>
              <Guid>a2f5abad912e42b6929dad0f3aa64365</Guid>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text1</Name>
              <Page isRef="7" />
              <Parent isRef="9" />
              <Text>FINDING AID FOR</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text1>
            <Image1 Ref="11" type="Image" isKey="true">
              <AspectRatio>True</AspectRatio>
              <Brush>Transparent</Brush>
              <CanShrink>True</CanShrink>
              <ClientRectangle>0,0,7.72,2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <DockStyle>Top</DockStyle>
              <HorAlignment>Center</HorAlignment>
              <ImageURL>{getLogo()}</ImageURL>
              <Name>Image1</Name>
              <Page isRef="7" />
              <Parent isRef="9" />
              <Stretch>True</Stretch>
            </Image1>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>ReportTitle1</Name>
          <Page isRef="7" />
          <Parent isRef="7" />
        </ReportTitle1>
        <Data7 Ref="12" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CalcInvisible>True</CalcInvisible>
          <ClientRectangle>0,3.5,7.72,0.1</ClientRectangle>
          <Components isList="true" count="0" />
          <Conditions isList="true" count="1">
            <value>RECORD.LEVEL_DESC,NotEqualTo,NeverTrue,,String,Red,Transparent,Arial_x002C_8,False,False,</value>
          </Conditions>
          <DataSourceName>RECORD</DataSourceName>
          <EndRenderEvent>{
createSortHashtable();
}</EndRenderEvent>
          <Filters isList="true" count="0" />
          <Name>Data7</Name>
          <Page isRef="7" />
          <Parent isRef="7" />
          <RenderingEvent>{
addSortNode(RECORD.REFD_HIGHER, RECORD.REFD, RECORD.ORIGINAL_TITLE);
prepRootNode (RECORD.REFD, RECORD.REFD_HIGHER);
//determineLevel(RECORD.REFD, RECORD.ORIGINAL_TITLE, RECORD.REFD_HIGHER, RECORD.LEVEL_DESC, userShowLevelDesc);}
}
if (this.RECORD.IMAGEPATH.ToString() != string.Empty)
{
	ImagesFound = true;
}	</RenderingEvent>
          <Sort isList="true" count="0" />
        </Data7>
        <Data11 Ref="13" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CalcInvisible>True</CalcInvisible>
          <ClientRectangle>0,4,7.72,0.1</ClientRectangle>
          <Components isList="true" count="0" />
          <Conditions isList="true" count="1">
            <value>RECORD.LEVEL_DESC,NotEqualTo,NeverTrue,,String,Red,Transparent,Arial_x002C_8,False,False,</value>
          </Conditions>
          <DataSourceName>RECORD</DataSourceName>
          <Filters isList="true" count="0" />
          <Guid>55301f27a16b4c639f123ab686baacaa</Guid>
          <Name>Data11</Name>
          <Page isRef="7" />
          <Parent isRef="7" />
          <RenderingEvent>{
determineLevel(RECORD.REFD, RECORD.ORIGINAL_TITLE, RECORD.REFD_HIGHER, RECORD.LEVEL_DESC, userShowLevelDesc);
}
if (!isRootNode(RECORD.REFD, RECORD.REFD_HIGHER))
{
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "collection")
	{
		NumberOfCollections = NumberOfCollections + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "subgroup" || this.RECORD.LEVEL_DESC.ToString().ToLower() == "sous-fonds" || this.RECORD.LEVEL_DESC.ToString().ToLower() == "subfonds")
	{
		NumberOfSubgroups = NumberOfSubgroups + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "series")
	{
		NumberOfSeries = NumberOfSeries + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "sub-series" || this.RECORD.LEVEL_DESC.ToString().ToLower() == "subseries")
	{
		NumberOfSubseries = NumberOfSubseries + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "sub-sub-series")
	{
		NumberOfSubsubseries = NumberOfSubsubseries + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "file")
	{
		NumberOfFiles = NumberOfFiles + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "file part")
	{
		NumberOfFileparts = NumberOfFileparts + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "item")
	{
		NumberOfItems = NumberOfItems + 1;
	}
	if (this.RECORD.LEVEL_DESC.ToString().ToLower() == "component")
	{
		NumberOfComponents = NumberOfComponents + 1;
	}
}</RenderingEvent>
          <Sort isList="true" count="0" />
        </Data11>
        <Data1 Ref="14" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <ClientRectangle>0,4.5,7.72,6.5</ClientRectangle>
          <Components isList="true" count="5">
            <Text2 Ref="15" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0.1,7.1,0.4</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,20,Bold</Font>
              <HorAlignment>Center</HorAlignment>
              <Hyperlink>{getHyperlink(RECORD.REFD, RECORD.SISN, userHyperlink, userActivateExternalHyperlinks)}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text2</Name>
              <Page isRef="7" />
              <Parent isRef="14" />
              <Text>{RECORD.ORIGINAL_TITLE}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text2>
            <Text3 Ref="16" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0.8,7.1,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,18,Bold</Font>
              <HorAlignment>Center</HorAlignment>
              <Hyperlink>{getHyperlink(RECORD.REFD, RECORD.SISN, userHyperlink, userActivateExternalHyperlinks)}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text3</Name>
              <Page isRef="7" />
              <Parent isRef="14" />
              <Text>{RECORD.REFD}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text3>
            <Image4 Ref="17" type="Image" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>0.3,0.6,7.1,3.7</ClientRectangle>
              <Conditions isList="true" count="0" />
              <ImageURL>{getImage(RECORD.IMAGEPATH, RECORD.LEVEL_DESC)}</ImageURL>
              <Name>Image4</Name>
              <Page isRef="7" />
              <Parent isRef="14" />
            </Image4>
            <Text18 Ref="18" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>4.2,6.2,0.6,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,10</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text18</Name>
              <Page isRef="7" />
              <Parent isRef="14" />
              <Text>Archivist</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text18>
            <Text22 Ref="19" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>4.8,6.2,2.6,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,10</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text22</Name>
              <Page isRef="7" />
              <Parent isRef="14" />
              <Text>{RECORD.ARCHIVIST_DESC}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text22>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName isNull="true" />
          <DataSourceName>RECORD</DataSourceName>
          <FilterMode>Or</FilterMode>
          <Filters isList="true" count="1">
            <value>_x007B_isRootNode_x0028_RECORD.REFD_x002C__x0020_RECORD.REFD_HIGHER_x0029__x007D_</value>
          </Filters>
          <Name>Data1</Name>
          <Page isRef="7" />
          <Parent isRef="7" />
          <Sort isList="true" count="0" />
        </Data1>
      </Components>
      <Conditions isList="true" count="0" />
      <Guid>1cf27ab0d906422c9f32ccd626c71e46</Guid>
      <Margins>0.39,0.39,0.39,0.39</Margins>
      <Name>TitlePage</Name>
      <PageHeight>11</PageHeight>
      <PageWidth>8.5</PageWidth>
      <PaperSize>Letter</PaperSize>
      <Report isRef="0" />
      <Watermark Ref="20" type="Stimulsoft.Report.Components.StiWatermark" isKey="true">
        <Font>Arial,100</Font>
        <TextBrush>[50:0:0:0]</TextBrush>
      </Watermark>
    </TitlePage>
    <TableOfContents Ref="21" type="Page" isKey="true">
      <BeginRenderEvent>int CurrentLevel = 0;
if (NumberOfSubgroups &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfSubgroups = CurrentLevel;
}
if (NumberOfSeries &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfSeries = CurrentLevel;
}
if (NumberOfSubseries &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfSubseries = CurrentLevel;
}
if (NumberOfSubsubseries &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfSubsubseries = CurrentLevel;
}
if (NumberOfFiles &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfFiles = CurrentLevel;
}
if (NumberOfFileparts &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfFileparts = CurrentLevel;
}
if (NumberOfItems &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfItems = CurrentLevel;
}
if (NumberOfComponents &gt; 0)
{
  CurrentLevel = CurrentLevel + 1;
  LevelOfComponents = CurrentLevel;
}</BeginRenderEvent>
      <Border>None;Black;2;Solid;False;4;Black</Border>
      <Brush>Transparent</Brush>
      <Components isList="true" count="5">
        <PageFooter1 Ref="22" type="PageFooterBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,9.92,7.72,0.3</ClientRectangle>
          <Components isList="true" count="1">
            <Text10 Ref="23" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>3.16,0.08,1.4,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text10</Name>
              <Page isRef="21" />
              <Parent isRef="22" />
              <Text>{PageNofM}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text10>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>PageFooter1</Name>
          <Page isRef="21" />
          <Parent isRef="21" />
        </PageFooter1>
        <Header1 Ref="24" type="HeaderBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,0.2,7.72,0.5</ClientRectangle>
          <Components isList="true" count="1">
            <Text39 Ref="25" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>2.46,0.1,2.7,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,18,Bold</Font>
              <Guid>203475e42d074689b66ead9c833fa8bc</Guid>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text39</Name>
              <Page isRef="21" />
              <Parent isRef="24" />
              <Text>Table of Contents</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text39>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>Header1</Name>
          <Page isRef="21" />
          <Parent isRef="21" />
        </Header1>
        <Data8 Ref="26" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,1.1,7.72,0.3</ClientRectangle>
          <Components isList="true" count="0" />
          <Conditions isList="true" count="0" />
          <CountData>1</CountData>
          <Filters isList="true" count="0" />
          <Name>Data8</Name>
          <Page isRef="21" />
          <Parent isRef="21" />
          <Sort isList="true" count="0" />
        </Data8>
        <Data5 Ref="27" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CanBreak>True</CanBreak>
          <CanShrink>True</CanShrink>
          <ClientRectangle>0,1.8,7.72,0.2</ClientRectangle>
          <Components isList="true" count="3">
            <Text7 Ref="28" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>0.3,0,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>b1c5ccf2cfef4d2b944a8b36e6a4f95c</Guid>
              <Margins>0,0,0,0</Margins>
              <Name>Text7</Name>
              <Page isRef="21" />
              <Parent isRef="27" />
              <Textext>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text7>
            <Text8 Ref="29" type="Text" isKey="true">
              <Brush>White</Brush>
              <ClientRectangle>7.12,0,0.3,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>28ef05a1fa8b44bfad0f77146894310f</Guid>
              <HorAlignment>Right</HorAlignment>
              <Hyperlink>##{COLLECTION_INFO_GROUP.LABEL}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <MinSize>0.2,0</MinSize>
              <Name>Text8</Name>
              <Page isRef="21" />
              <Parent isRef="27" />
              <ProcessAt>EndOfReport</ProcessAt>
              <ProcessAtEnd>True</ProcessAtEnd>
              <Text>{GetAnchorPageNumber(COLLECTION_INFO_GROUP.LABEL)}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text8>
            <Text9 Ref="30" type="Text" isKey="true">
              <AutoWidth>True</AutoWidth>
              <Brush>White</Brush>
              <CanGrow>True</CanGrow>
              <CanShrink>True</CanShrink>
              <ClientRectangle>0.3,0,0.7,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>ccac7371b3a74654bfe536885329d7d3</Guid>
              <Hyperlink>##{COLLECTION_INFO_GROUP.LABEL}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <MaxSize>6.2,0</MaxSize>
              <Name>Text9</Name>
              <Page isRef="21" />
              <Parent isRef="27" />
              <Text>{COLLECTION_INFO_GROUP.LABEL}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text9>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName>RECORD_COLLECTION_INFO_GROUP</DataRelationName>
          <DataSourceName>COLLECTION_INFO_GROUP</DataSourceName>
          <Filters isList="true" count="0" />
          <MasterComponent isRef="26" />
          <Name>Data5</Name>
          <Page isRef="21" />
          <Parent isRef="21" />
          <Sort isList="true" count="0" />
        </Data5>
        <Data3 Ref="31" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CanBreak>True</CanBreak>
          <CanShrink>True</CanShrink>
          <ClientRectangle>0,2.4,7.72,0.2</ClientRectangle>
          <ColumnWidth>7.7</ColumnWidth>
          <Components isList="true" count="3">
            <Text21 Ref="32" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>0.3,0,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text21</Name>
              <Page isRef="21" />
              <Parent isRef="31" />
              <Text>...........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text21>
            <Text15 Ref="33" type="Text" isKey="true">
              <Brush>White</Brush>
              <ClientRectangle>7.12,0,0.3,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <HorAlignment>Right</HorAlignment>
              <Hyperlink>##{RECORD.TITLE}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <MinSize>0.2,0</MinSize>
              <Name>Text15</Name>
              <Page isRef="21" />
              <Parent isRef="31" />
              <ProcessAt>EndOfReport</ProcessAt>
              <ProcessAtEnd>True</ProcessAtEnd>
              <Tag>{RECORD.SISN}</Tag>
              <Text>{GetAnchorPageNumber(sender.TagValue)}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text15>
            <Text14 Ref="34" type="Text" isKey="true">
              <AutoWidth>True</AutoWidth>
              <Brush>White</Brush>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0,0.6,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Hyperlink>##{RECORD.TITLE}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text14</Name>
              <Page isRef="21" />
              <Parent isRef="31" />
              <Text>{getTitle(RECORD.LEVEL_DESC, RECORD.ORIGINAL_TITLE, userShowLevelDesc, RECORD.REFD)}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text14>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName isNull="true" />
          <DataSourceName>RECORD</DataSourceName>
          <Filters isList="true" count="2">
            <value>_x007B__x0021_isRootNode_x0028_RECORD.REFD_x002C__x0020_RECORD.REFD_HIGHER_x0029__x007D_</value>
            <value>_x007B_showInToc_x0028_RECORD.REFD_x002C__x0020_userLevelsInToc_x0029__x007D_</value>
          </Filters>
          <Name>Data3</Name>
          <Page isRef="21" />
          <Parent isRef="21" />
          <RenderingEvent>{
double result = new double();
double subResult = new double();
double level = new double();
int Indentation = getUserIndentation();
	level = getLevel(this.RECORD.REFD);
//MessageBox.Show(this.RECORD.REFD + " - Level " + level.ToString());
	if (level &gt; 1)
	{
		subResult = (level - 1.00) * (Indentation / 10.00);
		result = Text14OriginalMaxWidth - subResult;
		this.Text14.MaxSize = new Stimulsoft.Base.Drawing.SizeD(result, 0);
								
		result = Text21OriginalWidth - subResult;
		Text21.Width = result;
		
		result = Text14OriginalLeft + subResult;
		Text14.Left = result;
		Text21.Left = result;
	}
	else
	{
		this.Text14.MaxSize = new Stimulsoft.Base.Drawing.SizeD(Text14OriginalMaxWidth, 0);
		this.Text14.Left = Text14OriginalLeft;
		this.Text21.Width = Text21OriginalWidth;
		this.Text21.Left = Text14OriginalLeft;
	}
}</RenderingEvent>
          <Sort isList="true" count="2">
            <value>ASC</value>
            <value>{getSortOrder(RECORD.REFD)}</value>
          </Sort>
        </Data3>
      </Components>
      <Conditions isList="true" count="0" />
      <Guid>146887cdaf254b42b741091e8afdc2a0</Guid>
      <Margins>0.39,0.39,0.39,0.39</Margins>
      <Name>TableOfContents</Name>
      <PageHeight>11</PageHeight>
      <PageWidth>8.5</PageWidth>
      <PaperSize>Letter</PaperSize>
      <Report isRef="0" />
      <Watermark Ref="35" type="Stimulsoft.Report.Components.StiWatermark" isKey="true">
        <Font>Arial,100</Font>
        <TextBrush>[50:0:0:0]</TextBrush>
      </Watermark>
    </TableOfContents>
    <Collection Ref="36" type="Page" isKey="true">
      <Border>None;Black;2;Solid;False;4;Black</Border>
      <Brush>Transparent</Brush>
      <Components isList="true" count="3">
        <PageFooter2 Ref="37" type="PageFooterBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,9.92,7.72,0.3</ClientRectangle>
          <Components isList="true" count="1">
            <Text11 Ref="38" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>3.16,0.08,1.4,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>2d3c4ea108cb44d189c6cda8c5375986</Guid>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text11</Name>
              <Page isRef="36" />
              <Parent isRef="37" />
              <Text>{PageNofM}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text11>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>PageFooter2</Name>
          <Page isRef="36" />
          <Parent isRef="36" />
        </PageFooter2>
        <Data2 Ref="39" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CanBreak>True</CanBreak>
          <ClientRectangle>0,0.2,7.72,0.9</ClientRectangle>
          <Components isList="true" count="2">
            <Text4 Ref="40" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0.4,7.12,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,14,Bold</Font>
              <Hyperlink>{getHyperlink(RECORD.REFD, RECORD.SISN, userHyperlink, userActivateExternalHyperlinks)}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text4</Name>
              <Page isRef="36" />
              <Parent isRef="39" />
              <Text>{getTitle(RECORD.ORIGINAL_TITLE, RECORD.DATE_OF_CREATION, RECORD.PHYSICAL_DESCRIPTION)}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text4>
            <Text5 Ref="41" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0,7.12,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,18,Bold</Font>
              <Hyperlink>{getHyperlink(RECORD.REFD, RECORD.SISN, userHyperlink, userActivateExternalHyperlinks)}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text5</Name>
              <Page isRef="36" />
              <Parent isRef="39" />
              <Text>{RECORD.REFD}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text5>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName isNull="true" />
          <DataSourceName>RECORD</DataSourceName>
          <FilterMode>Or</FilterMode>
          <Filters isList="true" count="1">
            <value>_x007B_isRootNode_x0028_RECORD.REFD_x002C__x0020_RECORD.REFD_HIGHER_x0029__x007D_</value>
          </Filters>
          <Name>Data2</Name>
          <Page isRef="36" />
          <Parent isRef="36" />
          <ResetDataSource>True</ResetDataSource>
          <Sort isList="true" count="0" />
        </Data2>
        <Data4 Ref="42" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <ClientRectangle>0,1.5,7.72,0.6</ClientRectangle>
          <Components isList="true" count="2">
            <Text28 Ref="43" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <CanShrink>True</CanShrink>
              <ClientRectangle>0.3,0.3,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text28</Name>
              <Page isRef="36" />
              <Parent isRef="42" />
              <Text>{COLLECTION_INFO_GROUP.VALUE}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Wysiwyg</TextQuality>
            </Text28>
            <Text6 Ref="44" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0.1,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,14,Bold</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text6</Name>
              <Page isRef="36" />
              <Parent isRef="42" />
              <Tag>{COLLECTION_INFO_GROUP.LABEL}</Tag>
              <Text>{COLLECTION_INFO_GROUP.LABEL}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text6>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName>RECORD_COLLECTION_INFO_GROUP</DataRelationName>
          <DataSourceName>COLLECTION_INFO_GROUP</DataSourceName>
          <Filters isList="true" count="0" />
          <MasterComponent isRef="39" />
          <Name>Data4</Name>
          <Page isRef="36" />
          <Parent isRef="36" />
          <RenderingEvent>{
AddAnchor(COLLECTION_INFO_GROUP.LABEL);
addTopLevelBookmark(COLLECTION_INFO_GROUP.LABEL, userLevelsInBookmarks);
}</RenderingEvent>
          <ResetDataSource>True</ResetDataSource>
          <Sort isList="true" count="0" />
        </Data4>
      </Components>
      <Conditions isList="true" count="0" />
      <Guid>adf6fee5ef9b40d3a677881e5915def0</Guid>
      <Margins>0.39,0.39,0.39,0.39</Margins>
      <Name>Collection</Name>
      <PageHeight>11</PageHeight>
      <PageWidth>8.5</PageWidth>
      <PaperSize>Letter</PaperSize>
      <Report isRef="0" />
      <Watermark Ref="45" type="Stimulsoft.Report.Components.StiWatermark" isKey="true">
        <Font>Arial,100</Font>
        <TextBrush>[50:0:0:0]</TextBrush>
      </Watermark>
    </Collection>
    <Subgroups Ref="46" type="Page" isKey="true">
      <Border>None;Black;2;Solid;False;4;Black</Border>
      <Brush>Transparent</Brush>
      <Components isList="true" count="4">
        <PageFooter3 Ref="47" type="PageFooterBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,9.92,7.72,0.3</ClientRectangle>
          <Components isList="true" count="1">
            <Text16 Ref="48" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>3.16,0.08,1.4,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>e9d771c4634d4686a887669daf02177e</Guid>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text16</Name>
              <Page isRef="46" />
              <Parent isRef="47" />
              <Text>{PageNofM}</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text16>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>PageFooter3</Name>
          <Page isRef="46" />
          <Parent isRef="46" />
        </PageFooter3>
        <HeaderBand1 Ref="49" type="HeaderBand" isKey="true">
          <Brush>Transparent</Brush>
          <ClientRectangle>0,0.2,7.72,0.4</ClientRectangle>
          <Components isList="true" count="1">
            <Text23 Ref="50" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <ClientRectangle>2.2,0.1,2.4,0.3</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,18,Bold</Font>
              <Guid>2ef6d46630e84f1bb0ffc234c737f1c8</Guid>
              <HorAlignment>Center</HorAlignment>
              <Margins>0,0,0,0</Margins>
              <Name>Text23</Name>
              <Page isRef="46" />
              <Parent isRef="49" />
              <Text>Series Descriptions</Text>
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text23>
          </Components>
          <Conditions isList="true" count="0" />
          <Name>HeaderBand1</Name>
          <Page isRef="46" />
          <Parent isRef="46" />
          <PrintOnAllPages>False</PrintOnAllPages>
        </HeaderBand1>
        <Data6 Ref="51" type="DataBand" isKey="true">
          <AfterPrintEvent>{AddAnchor(RECORD.SISN);}</AfterPrintEvent>
          <BeforePrintEvent>{
	if (RECORD.LEVEL_DESC == "Series") {
		this.Data6.NewPageBefore = true;
	}
	else {
		this.Data6.NewPageBefore = false;
	}
}</BeforePrintEvent>
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CanBreak>True</CanBreak>
          <CanShrink>True</CanShrink>
          <ClientRectangle>0,1,7.72,0.4</ClientRectangle>
          <Components isList="true" count="3">
            <Text19 Ref="52" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0.1,5.2,0.2</ClientRectangle>
              <Conditions isList="true" count="6">
                <value>RECORD.LEVEL_DESC,EqualTo,COLLECTION,,String,Black,Transparent,Microsoft_x0020_Sans_x0020_Serif_x002C_20.25_x002C_Bold_x002C_Point_x002C_False_x002C_0,True,False,</value>
                <value>RECORD.LEVEL_DESC,EqualTo,SERIES,,String,Black,Transparent,Microsoft_x0020_Sans_x0020_Serif_x002C_14.25_x002C_Bold_x002C_Point_x002C_False_x002C_0,True,False,</value>
                <value>RECORD.LEVEL_DESC,EqualTo,SUB-SUB-SERIES,,String,Black,Transparent,Microsoft_x0020_Sans_x0020_Serif_x002C_12_x002C_Underline_x002C_Point_x002C_False_x002C_0,True,False,</value>
                <value>Multi&lt;?xml version="1.0" encoding="utf-16" standalone="yes"?&gt;&lt;StiSerializer version="1.02" type="Net" application="State"&gt;&lt;Filters isList="true" count="2"&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,SUBSERIES,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,SUB-SERIES,,String&lt;/value&gt;&lt;/Filters&gt;&lt;FilterMode&gt;Or&lt;/FilterMode&gt;&lt;TextColor&gt;Black&lt;/TextColor&gt;&lt;BackColor&gt;Transparent&lt;/BackColor&gt;&lt;Font&gt;Microsoft Sans Serif, 12pt, style=Bold, Underline&lt;/Font&gt;&lt;BorderSides&gt;None&lt;/BorderSides&gt;&lt;Permissions&gt;Font, FontSize, FontStyleBold, FontStyleItalic, FontStyleUnderline, FontStyleStrikeout, TextColor, BackColor&lt;/Permissions&gt;&lt;/StiSerializer&gt;</value>
                <value>Multi&lt;?xml version="1.0" encoding="utf-16" standalone="yes"?&gt;&lt;StiSerializer version="1.02" type="Net" application="State"&gt;&lt;Filters isList="true" count="4"&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,ITEM,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,FILE_x0020_PART,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,COMPONENT,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,FILE,,String&lt;/value&gt;&lt;/Filters&gt;&lt;FilterMode&gt;Or&lt;/FilterMode&gt;&lt;TextColor&gt;Black&lt;/TextColor&gt;&lt;BackColor&gt;Transparent&lt;/BackColor&gt;&lt;Font&gt;Microsoft Sans Serif, 12pt, style=Bold&lt;/Font&gt;&lt;BorderSides&gt;None&lt;/BorderSides&gt;&lt;Permissions&gt;Font, FontSize, FontStyleBold, FontStyleItalic, FontStyleUnderline, FontStyleStrikeout, TextColor, BackColor&lt;/Permissions&gt;&lt;/StiSerializer&gt;</value>
                <value>Multi&lt;?xml version="1.0" encoding="utf-16" standalone="yes"?&gt;&lt;StiSerializer version="1.02" type="Net" application="State"&gt;&lt;Filters isList="true" count="3"&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,SUBFONDS,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,SOUS-FONDS,,String&lt;/value&gt;&lt;value&gt;RECORD.LEVEL_DESC,EqualTo,SUBGROUP,,String&lt;/value&gt;&lt;/Filters&gt;&lt;FilterMode&gt;Or&lt;/FilterMode&gt;&lt;TextColor&gt;Black&lt;/TextColor&gt;&lt;BackColor&gt;Transparent&lt;/BackColor&gt;&lt;Font&gt;Microsoft Sans Serif, 15.75pt, style=Bold&lt;/Font&gt;&lt;BorderSides&gt;None&lt;/BorderSides&gt;&lt;Permissions&gt;Font, FontSize, FontStyleBold, FontStyleItalic, FontStyleUnderline, FontStyleStrikeout, TextColor, BackColor&lt;/Permissions&gt;&lt;/StiSerializer&gt;</value>
              </Conditions>
              <Font>Microsoft Sans Serif,12,Bold| Underline</Font>
              <Guid>fcd321c44f4d4b79ad2b3b1a2816ab07</Guid>
              <Hyperlink>{getHyperlink(RECORD.REFD, RECORD.SISN, userHyperlink, userActivateExternalHyperlinks)}</Hyperlink>
              <Margins>0,0,0,0</Margins>
              <Name>Text19</Name>
              <Page isRef="46" />
              <Parent isRef="51" />
              <Tag>{RECORD.TITLE}</Tag>
              <Text>{getTitle(RECORD.LEVEL_DESC, RECORD.ORIGINAL_TITLE, userShowLevelDesc, RECORD.REFD, RECORD.DATE_OF_CREATION, RECORD.PHYSICAL_DESCRIPTION, 
RECORD.BOX_NO)}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
              <Type>Expression</Type>
            </Text19>
            <Text13 Ref="53" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanShrink>True</CanShrink>
              <ClientRectangle>0.3,0,7.1,0.1</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,18,Bold</Font>
              <Margins>0,0,0,0</Margins>
              <Name>Text13</Name>
              <Page isRef="46" />
              <Parent isRef="51" />
              <TextBrush>Black</TextBrush>
              <TextQuality>Typographic</TextQuality>
            </Text13>
            <Container2 Ref="54" type="Container" isKey="true">
              <Brush>Transparent</Brush>
              <CanGrow>True</CanGrow>
              <CanShrink>True</CanShrink>
              <ClientRectangle>5.6,0.1,1.8,0.3</ClientRectangle>
              <Components isList="true" count="1">
                <Image3 Ref="55" type="Image" isKey="true">
                  <AspectRatio>True</AspectRatio>
                  <Border>None;Black;4;Solid;False;4;Black</Border>
                  <Brush>Transparent</Brush>
                  <CanBreak>True</CanBreak>
                  <CanGrow>True</CanGrow>
                  <CanShrink>True</CanShrink>
                  <ClientRectangle>0,0,1.8,0.2</ClientRectangle>
                  <Conditions isList="true" count="0" />
                  <HorAlignment>Right</HorAlignment>
                  <ImageURL>{getImage(RECORD.IMAGEPATH, RECORD.LEVEL_DESC)}</ImageURL>
                  <MaxSize>1.8,1.8</MaxSize>
                  <Name>Image3</Name>
                  <Page isRef="46" />
                  <Parent isRef="54" />
                  <Stretch>True</Stretch>
                </Image3>
              </Components>
              <Conditions isList="true" count="0" />
              <Name>Container2</Name>
              <Page isRef="46" />
              <Parent isRef="51" />
            </Container2>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName isNull="true" />
          <DataSourceName>RECORD</DataSourceName>
          <Filters isList="true" count="1">
            <value>_x007B__x0021_isRootNode_x0028_RECORD.REFD_x002C__x0020_RECORD.REFD_HIGHER_x0029__x007D_</value>
          </Filters>
          <Guid>bf07728698924792a5eec166065b56df</Guid>
          <Name>Data6</Name>
          <Page isRef="46" />
          <Parent isRef="46" />
          <PrintIfDetailEmpty>True</PrintIfDetailEmpty>
          <RenderingEvent>{
	//AddAnchor(RECORD.TITLE);
	
	//addNewBookmark(RECORD.REFD.ToUpper(), RECORD.LEVEL_DESC, RECORD.ORIGINAL_TITLE, userLevelsInBookmarks);
	addNewBookmark(RECORD.REFD, RECORD.LEVEL_DESC, RECORD.ORIGINAL_TITLE, userLevelsInBookmarks);
	double result = new double();
	double subResult = new double();
	double level = new double();
	int Indentation = getUserIndentation();
	//Determine the global modifications to the position and dimensions of the fields
	double globalWidthMod = 0;
	double globalLeftMod = 0;
	//Resize the dimensions of the image so the image doesn't take up more vertical space than needed when the image
	//is a landscape-ratio image
	double newWidth = 0.00;
	double newHeight = 0.00;
	bool ok = false;
	if (this.RECORD.IMAGEPATH.ToString() != string.Empty &amp;&amp; userShowImages == "true" &amp;&amp; getShowImagesForLevel(this.RECORD.LEVEL_DESC.ToString()))
	{
		ok = getImageDimensions(this.RECORD.IMAGEPATH.ToString(), out newWidth, out newHeight, (double)ImagesWidth, (double)ImagesWidth);
	}
	else if (userShowNoImage == "true" &amp;&amp; userNoImage != string.Empty)
	{
		newWidth = noImageWidth;
		newHeight = noImageHeight;
	}
	else
	{
		newWidth = ImagesWidth;
		newHeight = 0.00;
	}
	Image3.Width = newWidth;
	Image3.Height = newHeight;
	Container2.Width = newWidth;
	Container2.Height = newHeight;
	//Check to see if an image must be displayed
	if (userShowImages == "true" &amp;&amp; getShowImagesForLevel(this.RECORD.LEVEL_DESC.ToString())&amp;&amp; (this.RECORD.IMAGEPATH.ToString() != string.Empty || (userShowNoImage == "true" &amp;&amp; userNoImage != string.Empty)))
	{
		globalWidthMod = ImagesWidth;
		//Check to see if the images must be displayed on the left
		if (userImagePlacement.ToLower() == "left")
		{
			globalLeftMod = ImagesWidth;
			Image3.HorAlignment = StiHorAlignment.Left;
		}
	}
	level = getLevel(this.RECORD.REFD);
	if (level &gt; 1)
	{
		subResult = (level - 1.00) * (Indentation / 10.00);
		result = Text19OriginalWidth - subResult - globalWidthMod;
		
		Text19.Width = result;
		Text30.Width = result;
		Text12.Width = result;
							
		result = Text19OriginalLeft + subResult;
		Text19.Left = result + globalLeftMod;
		Text30.Left = result + globalLeftMod;
		Text12.Left = result + globalLeftMod;
		
		if (userImagePlacement.ToLower() == "left")
		{
			if (userIndentImages == "true")
			{
				Container2.Left = result;
			}
			else if (userIndentImages == "false")
			{
				Container2.Left = Text19OriginalLeft;
			}
		}
	}
	else
	{
		Text19.Width = Text19OriginalWidth - globalWidthMod;
		Text19.Left = Text19OriginalLeft + globalLeftMod;
		Text30.Width = Text19OriginalWidth - globalWidthMod;
		Text30.Left = Text19OriginalLeft + globalLeftMod;
		Text12.Width = Text19OriginalWidth - globalWidthMod;
		Text12.Left = Text19OriginalLeft + globalLeftMod;
		
		if (userImagePlacement.ToLower() == "left")
		{
			Container2.Left = Text19OriginalLeft;
		}
	}
//AddAnchor(RECORD.SISN);
}</RenderingEvent>
          <Sort isList="true" count="2">
            <value>ASC</value>
            <value>{getSortOrder(RECORD.REFD)}</value>
          </Sort>
        </Data6>
        <Data10 Ref="56" type="DataBand" isKey="true">
          <Brush>Transparent</Brush>
          <BusinessObjectGuid isNull="true" />
          <CanBreak>True</CanBreak>
          <ClientRectangle>0,1.8,7.72,0.4</ClientRectangle>
          <Components isList="true" count="2">
            <Text12 Ref="57" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <CanShrink>True</CanShrink>
              <ClientRectangle>0.3,0.2,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12</Font>
              <Guid>be19cf5d680a48079816ae4ccc74a8d9</Guid>
              <Margins>0,0,0,0</Margins>
              <Name>Text12</Name>
              <Page isRef="46" />
              <Parent isRef="56" />
              <Text>{COLLECTION_INFO_GROUP.VALUE}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text12>
            <Text30 Ref="58" type="Text" isKey="true">
              <Brush>Transparent</Brush>
              <CanBreak>True</CanBreak>
              <CanGrow>True</CanGrow>
              <ClientRectangle>0.3,0,7.1,0.2</ClientRectangle>
              <Conditions isList="true" count="0" />
              <Font>Microsoft Sans Serif,12,Italic</Font>
              <Guid>a1da1b0a029b4b498d929b92af3fda4d</Guid>
              <Margins>0,0,0,0</Margins>
              <Name>Text30</Name>
              <Page isRef="46" />
              <Parent isRef="56" />
              <Tag>{COLLECTION_INFO_GROUP.LABEL}</Tag>
              <Text>{COLLECTION_INFO_GROUP.LABEL}</Text>
              <TextBrush>Black</TextBrush>
              <TextOptions>HotkeyPrefix=None, LineLimit=False, RightToLeft=False, Trimming=None, WordWrap=True, Angle=0, FirstTabOffset=40, DistanceBetweenTabs=20,</TextOptions>
              <TextQuality>Typographic</TextQuality>
            </Text30>
          </Components>
          <Conditions isList="true" count="0" />
          <DataRelationName>RECORD_COLLECTION_INFO_GROUP</DataRelationName>
          <DataSourceName>COLLECTION_INFO_GROUP</DataSourceName>
          <Filters isList="true" count="0" />
          <MasterComponent isRef="51" />
          <Name>Data10</Name>
          <Page isRef="46" />
          <Parent isRef="46" />
          <Sort isList="true" count="0" />
        </Data10>
      </Components>
      <Conditions isList="true" count="0" />
      <Guid>8f7c4d52fecf4fa0bec2daab7c63b3fa</Guid>
      <Margins>0.39,0.39,0.39,0.39</Margins>
      <Name>Subgroups</Name>
      <PageHeight>11</PageHeight>
      <PageWidth>8.5</PageWidth>
      <PaperSize>Letter</PaperSize>
      <Report isRef="0" />
      <Watermark Ref="59" type="Stimulsoft.Report.Components.StiWatermark" isKey="true">
        <Font>Arial,100</Font>
        <TextBrush>[50:0:0:0]</TextBrush>
      </Watermark>
    </Subgroups>
    <formOptions Ref="60" type="Stimulsoft.Report.Dialogs.StiForm" isKey="true">
      <BackColor>Control</BackColor>
      <Components isList="true" count="5">
        <gbLayout Ref="61" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
          <BackColor>Control</BackColor>
          <ClientRectangle>8,0,544,96</ClientRectangle>
          <Components isList="true" count="12">
            <lbIndentation Ref="62" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>272,40,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>5e1f416d730e4c43a62a2d91d7a0bdd7</Guid>
              <Location>272, 40</Location>
              <Name>lbIndentation</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>Indentation:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbIndentation>
            <nmIndentation Ref="63" type="Stimulsoft.Report.Dialogs.StiNumericUpDownControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>384,40,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "This sets the number of spaces per level displayed in front of each record";}</GetToolTipEvent>
              <Location>384, 40</Location>
              <Maximum>10</Maximum>
              <Name>nmIndentation</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Value>3</Value>
            </nmIndentation>
            <lbShowLevelDesc Ref="64" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,16,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>8, 16</Location>
              <Name>lbShowLevelDesc</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>Show Level in Title:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbShowLevelDesc>
            <cmShowLevelDesc Ref="65" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,16,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to show the value of the \"Level-field\" in front of the title or not";}</GetToolTipEvent>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 16</Location>
              <Name>cmShowLevelDesc</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Text />
            </cmShowLevelDesc>
            <nmLevelsInBookmarks Ref="66" type="Stimulsoft.Report.Dialogs.StiNumericUpDownControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>384,16,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "This sets the number of levels that will be displayed in the Bookmarks Pane";}</GetToolTipEvent>
              <Guid>211f14de9a674cfc97fd8d90d44c1260</Guid>
              <Location>384, 16</Location>
              <Maximum>8</Maximum>
              <Name>nmLevelsInBookmarks</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Value>3</Value>
            </nmLevelsInBookmarks>
            <nmLevelsInToc Ref="67" type="Stimulsoft.Report.Dialogs.StiNumericUpDownControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,64,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "This sets the number of levels that will be displayed in the Table of Contents";}</GetToolTipEvent>
              <Guid>17393ab4e6b147e3b6318f4d1521076a</Guid>
              <Location>120, 64</Location>
              <Maximum>8</Maximum>
              <Minimum>1</Minimum>
              <Name>nmLevelsInToc</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Value>3</Value>
            </nmLevelsInToc>
            <lbLevelsInBookmarks Ref="68" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>272,16,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>667c0f9f2fd941a484fba3dbab157a75</Guid>
              <Location>272, 16</Location>
              <Name>lbLevelsInBookmarks</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>Bookmark Levels:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbLevelsInBookmarks>
            <lbLevelsInToc Ref="69" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,64,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>956c344009ba468ba921d8c643207298</Guid>
              <Location>8, 64</Location>
              <Name>lbLevelsInToc</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>ToC Levels:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbLevelsInToc>
            <lbSort Ref="70" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>272,64,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>f6cc93f961bd41b1a9600e0f3163f8b5</Guid>
              <Location>272, 64</Location>
              <Name>lbSort</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>Sort Order:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbSort>
            <cmSort Ref="71" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>384,64,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines how the data in the report will be sorted";}</GetToolTipEvent>
              <Guid>e0c9e4ca95e94894b89252ce5d7e5b6e</Guid>
              <Items isList="true" count="2">
                <value>Refd</value>
                <value>Title</value>
              </Items>
              <Location>384, 64</Location>
              <Name>cmSort</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Text />
            </cmSort>
            <lbPrettifyTitles Ref="72" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,40,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>bb1d33aeb6284ad0855d1911f599861d</Guid>
              <Location>8, 40</Location>
              <Name>lbPrettifyTitles</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>104, 16</Size>
              <Text>Prettify Titles:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbPrettifyTitles>
            <cmPrettifyTitles Ref="73" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,40,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to make all the titles in the report have each word start with a capital letter";}</GetToolTipEvent>
              <Guid>7f1a5f77cd064fbfb63f77fbfa04faf1</Guid>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 40</Location>
              <Name>cmPrettifyTitles</Name>
              <Page isRef="60" />
              <Parent isRef="61" />
              <Size>144, 20</Size>
              <Text />
            </cmPrettifyTitles>
          </Components>
          <Font>Microsoft Sans Serif,8,Bold</Font>
          <ForeColor>Black</ForeColor>
          <Location>8, 0</Location>
          <Name>gbLayout</Name>
          <Page isRef="60" />
          <Parent isRef="60" />
          <Size>544, 96</Size>
          <Text>Layout</Text>
        </gbLayout>
        <gbImages Ref="74" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
          <BackColor>Control</BackColor>
          <ClientRectangle>8,96,544,272</ClientRectangle>
          <Components isList="true" count="18">
            <Label1 Ref="75" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,16,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>8, 16</Location>
              <Name>Label1</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Show Images:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </Label1>
            <cmShowImages Ref="76" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,16,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to show images in the report or not";}</GetToolTipEvent>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 16</Location>
              <Name>cmShowImages</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <SelectedIndexChangedEvent>{
	if (cmShowImages.SelectedItem.ToString().ToLower() == "yes")
	{
		cmImagePlacement.Enabled = true;
		if (cmImagePlacement.SelectedItem.ToString().ToLower() == "left")
		{
			cmIndentImages.Enabled = true;
		}
		else if (cmImagePlacement.SelectedItem.ToString().ToLower() == "right")
		{
			cmIndentImages.Enabled = false;
		}
		cmImagePlaceholder.Enabled = true;
		if (cmImagePlaceholder.SelectedItem.ToString().ToLower() == "yes")
		{
			tbImagePlaceholder.Enabled = true;
			btFindImagePlaceholder.Enabled = true;
		}
		else if (cmImagePlaceholder.SelectedItem.ToString().ToLower() == "no")
		{
			tbImagePlaceholder.Enabled = false;
		}
		clbLevelDesc.Enabled = true;
		tbLogo.Enabled = true;
		btFindLogo.Enabled = true;
		
	}
	else if (cmShowImages.SelectedItem.ToString().ToLower() == "no")
	{
		cmImagePlacement.Enabled = false;
		cmImagePlaceholder.Enabled = false;
		tbImagePlaceholder.Enabled = false;
		clbLevelDesc.Enabled = false;
		cmIndentImages.Enabled = false;
		btFindLogo.Enabled = false;
		btFindImagePlaceholder.Enabled = false;
		tbLogo.Enabled = false;
	}
}</SelectedIndexChangedEvent>
              <Size>144, 20</Size>
              <Text />
            </cmShowImages>
            <lbImagePlacement Ref="77" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,40,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>e04355cd4866474689b4fdf92722d5b7</Guid>
              <Location>8, 40</Location>
              <Name>lbImagePlacement</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Image Placement:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbImagePlacement>
            <lbShowPlaceholder Ref="78" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,112,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>b413b6d30f7d409e8c975809b58c8220</Guid>
              <Location>8, 112</Location>
              <Name>lbShowPlaceholder</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Show Placeholder:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbShowPlaceholder>
            <cmImagePlaceholder Ref="79" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,112,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to show a placeholder image for records that do not contain an image";}</GetToolTipEvent>
              <Guid>71135c2404d34ae68de303b939b3e129</Guid>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 112</Location>
              <Name>cmImagePlaceholder</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <SelectedIndexChangedEvent>{
	if (cmImagePlaceholder.SelectedItem.ToString().ToLower() == "yes")
	{
		tbImagePlaceholder.Enabled = true;
		btFindImagePlaceholder.Enabled = true;
	}
	else if (cmImagePlaceholder.SelectedItem.ToString().ToLower() == "no")
	{
		tbImagePlaceholder.Enabled = false;
		btFindImagePlaceholder.Enabled = false;
	}
}</SelectedIndexChangedEvent>
              <Size>144, 20</Size>
              <Text />
            </cmImagePlaceholder>
            <lbImagePlaceholder Ref="80" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,136,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>8b02db027aad43068d41d74524f03edc</Guid>
              <Location>8, 136</Location>
              <Name>lbImagePlaceholder</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Image Placeholder:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbImagePlaceholder>
            <cmImagePlacement Ref="81" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,40,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to show the images on the right or left hand side";}</GetToolTipEvent>
              <Items isList="true" count="2">
                <value>Right</value>
                <value>Left</value>
              </Items>
              <Location>120, 40</Location>
              <Name>cmImagePlacement</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <SelectedIndexChangedEvent>{
	if (cmImagePlacement.SelectedItem.ToString().ToLower() == "right")
	{
		cmIndentImages.Enabled = false;
	}
	else if (cmImagePlacement.SelectedItem.ToString().ToLower() == "left")
	{
		cmIndentImages.Enabled = true;
	}
}</SelectedIndexChangedEvent>
              <Size>144, 20</Size>
              <Text />
            </cmImagePlacement>
            <clbLevelDesc Ref="82" type="Stimulsoft.Report.Dialogs.StiCheckedListBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <CheckOnClick>True</CheckOnClick>
              <ClientRectangle>120,160,144,96</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <GetToolTipEvent>{e.Value = "Determines the levels for which to show images";}</GetToolTipEvent>
              <Items isList="true" count="0" />
              <Location>120, 160</Location>
              <Name>clbLevelDesc</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>144, 96</Size>
            </clbLevelDesc>
            <lbShowForLevels Ref="83" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,160,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>0185ec9ee75744f0995914617a066152</Guid>
              <Location>8, 160</Location>
              <Name>lbShowForLevels</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Show Images for:</Text>
              <TextAlign>TopRight</TextAlign>
            </lbShowForLevels>
            <tbImagePlaceholder Ref="84" type="Stimulsoft.Report.Dialogs.StiTextBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,136,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "The location and name of the placeholder image (example: F:\MINISIS\\Images\\placeholder image.jpg)";}</GetToolTipEvent>
              <LeaveEvent>{
	try
	{
		pbImagePlaceholder.Control.Image = Image.FromFile(tbImagePlaceholder.Text);
		pbImagePlaceholder.Visible = true;
	}
	catch (System.Exception)
	{
		pbImagePlaceholder.Visible = false;
	}
}</LeaveEvent>
              <Location>120, 136</Location>
              <Name>tbImagePlaceholder</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>144, 20</Size>
              <Text />
            </tbImagePlaceholder>
            <lbIndentImages Ref="85" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,64,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>8, 64</Location>
              <Name>lbIndentImages</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Indent Images:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbIndentImages>
            <cmIndentImages Ref="86" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,64,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to indent only the text of a record (No) or the image as well (Yes)";}</GetToolTipEvent>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 64</Location>
              <Name>cmIndentImages</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>144, 20</Size>
              <Text />
            </cmIndentImages>
            <lbLogo Ref="87" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,88,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>7501e33dfd2a4e888770c1b5f8b63d5e</Guid>
              <Location>8, 88</Location>
              <Name>lbLogo</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>104, 16</Size>
              <Text>Logo:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbLogo>
            <tbLogo Ref="88" type="Stimulsoft.Report.Dialogs.StiTextBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,88,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "The location and name of the logo image (example: F:\MINISIS\\Images\\logo.jpg)";}</GetToolTipEvent>
              <Guid>5408d1f069ed405da6bcb878dc1e0e5a</Guid>
              <LeaveEvent>{
	try
	{
		pbLogo.Control.Image = Image.FromFile(tbLogo.Text);
		pbLogo.Visible = true;
	}
	catch (System.Exception)
	{
		//pbLogo.Control.Image.Dispose();
		pbLogo.Visible = false;
	}
}</LeaveEvent>
              <Location>120, 88</Location>
              <Name>tbLogo</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>144, 20</Size>
              <Text />
            </tbLogo>
            <GroupBox1 Ref="89" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>288,8,136,128</ClientRectangle>
              <Components isList="true" count="1">
                <pbLogo Ref="90" type="Stimulsoft.Report.Dialogs.StiPictureBoxControl" isKey="true">
                  <BackColor>Control</BackColor>
                  <ClientRectangle>8,16,120,104</ClientRectangle>
                  <Components isList="true" count="0" />
                  <Font>Microsoft Sans Serif,8</Font>
                  <ForeColor>Black</ForeColor>
                  <GetToolTipEvent>{e.Value = "The image that will be displayed as the logo on the report";}</GetToolTipEvent>
                  <Location>8, 16</Location>
                  <Name>pbLogo</Name>
                  <Page isRef="60" />
                  <Parent isRef="89" />
                  <Size>120, 104</Size>
                  <SizeMode>Zoom</SizeMode>
                  <TransparentColor>Transparent</TransparentColor>
                </pbLogo>
              </Components>
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>288, 8</Location>
              <Name>GroupBox1</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>136, 128</Size>
              <Text>Logo</Text>
            </GroupBox1>
            <GroupBox2 Ref="91" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>288,136,136,128</ClientRectangle>
              <Components isList="true" count="1">
                <pbImagePlaceholder Ref="92" type="Stimulsoft.Report.Dialogs.StiPictureBoxControl" isKey="true">
                  <BackColor>Control</BackColor>
                  <ClientRectangle>8,16,120,104</ClientRectangle>
                  <Components isList="true" count="0" />
                  <Font>Microsoft Sans Serif,8</Font>
                  <ForeColor>Black</ForeColor>
                  <GetToolTipEvent>{e.Value = "The image that will be displayed for records that do not contain an image";}</GetToolTipEvent>
                  <Guid>d931999453a641ff894e90477a9a97d7</Guid>
                  <Location>8, 16</Location>
                  <Name>pbImagePlaceholder</Name>
                  <Page isRef="60" />
                  <Parent isRef="91" />
                  <Size>120, 104</Size>
                  <SizeMode>Zoom</SizeMode>
                  <TransparentColor>Transparent</TransparentColor>
                </pbImagePlaceholder>
              </Components>
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>1f9539c63acc4a7ba0c15c6e965d161d</Guid>
              <Location>288, 136</Location>
              <Name>GroupBox2</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>136, 128</Size>
              <Text>Placeholder</Text>
            </GroupBox2>
            <btFindLogo Ref="93" type="Stimulsoft.Report.Dialogs.StiButtonControl" isKey="true">
              <ClickEvent>{
	openDataFile.Title = "Find Logo";
	openDataFile.Filter = "Image Files|*.jpeg;*.jpg;*.bmp;*.gif|All files|*.*";
	if (openDataFile.ShowDialog() == DialogResult.OK)
	{
		tbLogo.Text = openDataFile.FileName;
		tbLogo_Leave(null, new System.EventArgs());
	}
}</ClickEvent>
              <ClientRectangle>264,88,20,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8,Bold</Font>
              <ForeColor>Black</ForeColor>
              <Location>264, 88</Location>
              <Name>btFindLogo</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>20, 20</Size>
              <Text>...</Text>
            </btFindLogo>
            <btFindImagePlaceholder Ref="94" type="Stimulsoft.Report.Dialogs.StiButtonControl" isKey="true">
              <ClickEvent>{
	openDataFile.Title = "Find Placeholder";
	openDataFile.Filter = "Image Files|*.jpeg;*.jpg;*.bmp;*.gif|All files|*.*";
	if (openDataFile.ShowDialog() == DialogResult.OK)
	{
		tbImagePlaceholder.Text = openDataFile.FileName;
		tbImagePlaceholder_Leave(null, new System.EventArgs());
	}
}</ClickEvent>
              <ClientRectangle>264,136,20,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8,Bold</Font>
              <ForeColor>Black</ForeColor>
              <Guid>280d24c102e24c76a3b3c39277bb2512</Guid>
              <Location>264, 136</Location>
              <Name>btFindImagePlaceholder</Name>
              <Page isRef="60" />
              <Parent isRef="74" />
              <Size>20, 20</Size>
              <Text>...</Text>
            </btFindImagePlaceholder>
          </Components>
          <Font>Microsoft Sans Serif,8,Bold</Font>
          <ForeColor>Black</ForeColor>
          <Location>8, 96</Location>
          <Name>gbImages</Name>
          <Page isRef="60" />
          <Parent isRef="60" />
          <Size>544, 272</Size>
          <Text>Images</Text>
        </gbImages>
        <gbHyperlinks Ref="95" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
          <BackColor>Control</BackColor>
          <ClientRectangle>8,376,544,96</ClientRectangle>
          <Components isList="true" count="6">
            <lbAddHyperlinks Ref="96" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,16,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>7bed4ce1d9264caea3299667739d60de</Guid>
              <Location>8, 16</Location>
              <Name>lbAddHyperlinks</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <Size>104, 16</Size>
              <Text>Add Hyperlinks:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbAddHyperlinks>
            <cmAddHyperlinks Ref="97" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,16,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "Determines whether to add hyperlinks linking to the records in the OPAC";}</GetToolTipEvent>
              <Guid>def239e8ec1941ecbbb7d3ea7e53f89f</Guid>
              <Items isList="true" count="2">
                <value>Yes</value>
                <value>No</value>
              </Items>
              <Location>120, 16</Location>
              <Name>cmAddHyperlinks</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <SelectedIndexChangedEvent>{
	if (cmAddHyperlinks.SelectedItem.ToString().ToLower() == "yes")
	{
		tbHyperlink.Enabled = true;
		cmUrlIdentifier.Enabled = true;
	}
	else if (cmAddHyperlinks.SelectedItem.ToString().ToLower() == "no")
	{
		tbHyperlink.Enabled = false;
		cmUrlIdentifier.Enabled = false;
	}
}</SelectedIndexChangedEvent>
              <Size>144, 20</Size>
              <Text />
            </cmAddHyperlinks>
            <lbHyperlink Ref="98" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,64,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>76c0195470c24b9a8fccbaa927c25419</Guid>
              <Location>8, 64</Location>
              <Name>lbHyperlink</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <Size>104, 16</Size>
              <Text>Hyperlink:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbHyperlink>
            <tbHyperlink Ref="99" type="Stimulsoft.Report.Dialogs.StiTextBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,64,416,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "The actual hyperlink, including the @-sign indicating where the Identifier needs to be substituted";}</GetToolTipEvent>
              <Guid>53288c0f2527416e997aaad4270950f1</Guid>
              <LeaveEvent>{
	try
	{
		pbImagePlaceholder.Control.Image = Image.FromFile(tbImagePlaceholder.Text);
		pbImagePlaceholder.Visible = true;
	}
	catch (System.Exception)
	{
		pbImagePlaceholder.Visible = false;
	}
}</LeaveEvent>
              <Location>120, 64</Location>
              <Name>tbHyperlink</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <Size>416, 20</Size>
              <Text />
            </tbHyperlink>
            <lbUrlIdentifier Ref="100" type="Stimulsoft.Report.Dialogs.StiLabelControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,40,104,16</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Guid>5802473f75604691a5d7cf15c835f64e</Guid>
              <Location>8, 40</Location>
              <Name>lbUrlIdentifier</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <Size>104, 16</Size>
              <Text>Identifier:</Text>
              <TextAlign>MiddleRight</TextAlign>
            </lbUrlIdentifier>
            <cmUrlIdentifier Ref="101" type="Stimulsoft.Report.Dialogs.StiComboBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>120,40,144,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <GetToolTipEvent>{e.Value = "The unique identifier that will be subsituded in the hyperlink to link to the records in the OPAC";}</GetToolTipEvent>
              <Guid>2892c01c9df84b97b94033c05b26b78c</Guid>
              <Items isList="true" count="2">
                <value>REFD</value>
                <value>SISN</value>
              </Items>
              <Location>120, 40</Location>
              <Name>cmUrlIdentifier</Name>
              <Page isRef="60" />
              <Parent isRef="95" />
              <SelectedIndexChangedEvent>{
	if (cmAddHyperlinks.SelectedItem.ToString().ToLower() == "yes")
	{
		tbHyperlink.Enabled = true;
	}
	else if (cmAddHyperlinks.SelectedItem.ToString().ToLower() == "no")
	{
		tbHyperlink.Enabled = false;
	}
}</SelectedIndexChangedEvent>
              <Size>144, 20</Size>
              <Text />
            </cmUrlIdentifier>
          </Components>
          <Font>Microsoft Sans Serif,8,Bold</Font>
          <ForeColor>Black</ForeColor>
          <Location>8, 376</Location>
          <Name>gbHyperlinks</Name>
          <Page isRef="60" />
          <Parent isRef="60" />
          <Size>544, 96</Size>
          <Text>Hyperlinks</Text>
        </gbHyperlinks>
        <btRunReport Ref="102" type="Stimulsoft.Report.Dialogs.StiButtonControl" isKey="true">
          <ClickEvent>{
	string showImages;
	string showPlaceholder;
	string Indentation;
	string LevelsInToc;
	string LevelsInBookmarks;
	string showLevelDesc;
	string indentImages;
	string addHyperlinks;
	string sortOrder;
	string prettifyTitles;
	if (cmShowImages.SelectedItem.ToString().ToLower() == "yes")
	{
		showImages = "true";
	}
	else
	{
		showImages = "false";
	}
	if (cmImagePlaceholder.SelectedItem.ToString().ToLower() == "yes")
	{
		showPlaceholder = "true";
	}
	else
	{
		showPlaceholder = "false";
	}
	if (cmShowLevelDesc.SelectedItem.ToString().ToLower() == "yes")
	{
		showLevelDesc = "true";
	}
	else
	{
		showLevelDesc = "false";
	}
	
	if (cmPrettifyTitles.SelectedItem.ToString().ToLower() == "yes")
	{
		prettifyTitles = "true";
	}
	else
	{
		prettifyTitles = "false";
	}
	if (cmIndentImages.SelectedItem.ToString().ToLower() == "yes")
	{
		indentImages = "true";
	}
	else
	{
		indentImages = "false";
	}
	if (cmAddHyperlinks.SelectedItem.ToString().ToLower() == "yes")
	{
		addHyperlinks = "true";
	}
	else
	{
		addHyperlinks = "false";
	}
	setWatermark(WatermarkEnable.Checked, WatermarkTextBox.Text);
	Indentation = nmIndentation.Value.ToString();
	LevelsInToc = nmLevelsInToc.Value.ToString();
	sortOrder = cmSort.SelectedItem.ToString().ToLower();
	LevelsInBookmarks = nmLevelsInBookmarks.Value.ToString();
	runReport(Indentation, showPlaceholder, tbImagePlaceholder.Text, showImages, cmImagePlacement.SelectedItem.ToString().ToLower(), showLevelDesc, indentImages, clbLevelDesc.CheckedItems, LevelsInToc, LevelsInBookmarks, tbLogo.Text, addHyperlinks, cmUrlIdentifier.SelectedItem.ToString(), tbHyperlink.Text, sortOrder, prettifyTitles);
}</ClickEvent>
          <ClientRectangle>224,552,96,24</ClientRectangle>
          <Components isList="true" count="0" />
          <Font>Microsoft Sans Serif,8</Font>
          <ForeColor>Black</ForeColor>
          <GetToolTipEvent>{e.Value = "Run the report with these settings";}</GetToolTipEvent>
          <Location>224, 552</Location>
          <Name>btRunReport</Name>
          <Page isRef="60" />
          <Parent isRef="60" />
          <Size>96, 24</Size>
          <Text>Run Report</Text>
        </btRunReport>
        <GroupBoxControl1 Ref="103" type="Stimulsoft.Report.Dialogs.StiGroupBoxControl" isKey="true">
          <BackColor>Control</BackColor>
          <ClientRectangle>8,480,544,56</ClientRectangle>
          <Components isList="true" count="2">
            <WatermarkEnable Ref="104" type="Stimulsoft.Report.Dialogs.StiCheckBoxControl" isKey="true">
              <BackColor>Control</BackColor>
              <ClientRectangle>8,16,72,24</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>8, 16</Location>
              <Name>WatermarkEnable</Name>
              <Page isRef="60" />
              <Parent isRef="103" />
              <Size>72, 24</Size>
              <Text>Enable</Text>
            </WatermarkEnable>
            <WatermarkTextBox Ref="105" type="Stimulsoft.Report.Dialogs.StiTextBoxControl" isKey="true">
              <BackColor>Window</BackColor>
              <ClientRectangle>88,16,448,20</ClientRectangle>
              <Components isList="true" count="0" />
              <Font>Microsoft Sans Serif,8</Font>
              <ForeColor>Black</ForeColor>
              <Location>88, 16</Location>
              <Name>WatermarkTextBox</Name>
              <Page isRef="60" />
              <Parent isRef="103" />
              <Size>448, 20</Size>
              <Text />
            </WatermarkTextBox>
          </Components>
          <Font>Microsoft Sans Serif,8</Font>
          <ForeColor>Black</ForeColor>
          <Location>8, 480</Location>
          <Name>GroupBoxControl1</Name>
          <Page isRef="60" />
          <Parent isRef="60" />
          <Size>544, 56</Size>
          <Text>Watermark</Text>
        </GroupBoxControl1>
      </Components>
      <Font>Microsoft Sans Serif,8</Font>
      <Guid>04b08b908ba04215ad47a0103088fd16</Guid>
      <LoadFormEvent>{
	cmShowLevelDesc.Control.TabIndex = 0;
	cmPrettifyTitles.Control.TabIndex = 5;
	nmLevelsInToc.Control.TabIndex = 10;
	nmLevelsInBookmarks.Control.TabIndex = 20;
	nmIndentation.Control.TabIndex = 30;
	cmSort.Control.TabIndex = 40;
	cmShowImages.Control.TabIndex = 50;
	cmImagePlacement.Control.TabIndex = 60;
	cmIndentImages.Control.TabIndex = 70;
	tbLogo.Control.TabIndex = 80;
	btFindLogo.Control.TabIndex = 90;
	cmImagePlaceholder.Control.TabIndex = 100;
	tbImagePlaceholder.Control.TabIndex = 110;
	btFindImagePlaceholder.Control.TabIndex = 120;
	clbLevelDesc.Control.TabIndex = 130;
	cmAddHyperlinks.Control.TabIndex = 140;
	cmUrlIdentifier.Control.TabIndex = 150;
	tbHyperlink.Control.TabIndex = 160;
	btRunReport.Control.TabIndex = 170;
		
	//Set the title of the option form window
	formOptions.Text = "Finding Aid Report (" + getVersion()+ ") - Options";
	//Read the value from the variable userSortOrder and set the default value for cmSort
	if (userSortOrder.ToLower() == "refd")
	{
		cmSort.SelectedIndex = 0;
	}
	else if (userSortOrder.ToLower() == "title")
	{
		cmSort.SelectedIndex = 1;
	}
	else
	{
		cmSort.SelectedIndex = 0;
	}
	
	//Read the value from the variable userActivateExternalHyperlinks and set the default value for cmAddHyperlinks
	if (userActivateExternalHyperlinks.ToLower() == "true")
	{
		cmAddHyperlinks.SelectedIndex = 0;
	}
	else if (userActivateExternalHyperlinks.ToLower() == "false")
	{
		cmAddHyperlinks.SelectedIndex = 1;
	}
	else
	{
		cmAddHyperlinks.SelectedIndex = 1;
	}
	//Read the value from the variable userHyperlink and set the default value for tbHyperlink
	if (userHyperlink != string.Empty)
	{
		tbHyperlink.Text = userHyperlink;
	}
	//Read the value from the variable userUrlIdentifier and set the default value for cmUrlIdentifier
	if (userUrlIdentifier.ToLower() == "refd")
	{
		cmUrlIdentifier.SelectedIndex = 0;
	}
	else if (userUrlIdentifier.ToLower() == "sisn")
	{
		cmUrlIdentifier.SelectedIndex = 1;
	}
	else
	{
		cmUrlIdentifier.SelectedIndex = 1;
	}
	//Read the value from the variable userIndentation and set the default value for nmIndentation
	if (userIndentation != string.Empty &amp;&amp; int.Parse(userIndentation) &gt;= 0 &amp;&amp; int.Parse(userIndentation) &lt;= 10)
	{
		nmIndentation.Value = int.Parse(userIndentation);
	}
	else
	{
		nmIndentation.Value = 3;
	}
	//Read the value from the variable userLevelsInToc and set the default value for nmLevelsInToc
	if (userLevelsInToc != string.Empty &amp;&amp; int.Parse(userLevelsInToc) &gt;= 1 &amp;&amp; int.Parse(userLevelsInToc) &lt;= 8)
	{
		nmLevelsInToc.Value = int.Parse(userLevelsInToc);
	}
	else
	{
		nmLevelsInToc.Value = 3;
	}
	//Read the value from the variable userLevelsInBookmarks and set the default value for nmLevelsInBookmarks
	if (userLevelsInBookmarks != string.Empty &amp;&amp; int.Parse(userLevelsInBookmarks) &gt;= 1 &amp;&amp; int.Parse(userLevelsInBookmarks) &lt;= 8)
	{
		nmLevelsInBookmarks.Value = int.Parse(userLevelsInBookmarks);
	}
	else
	{
		nmLevelsInBookmarks.Value = 8;
	}
	//Read the value from the variable userImagePlacement and set the default value for cmImagePlacement
	if (userImagePlacement.ToLower() == "right")
	{
		cmImagePlacement.SelectedIndex = 0;
	}
	else if (userImagePlacement.ToLower() == "left")
	{
		cmImagePlacement.SelectedIndex = 1;
	}
	else if (userImagePlacement == string.Empty)
	{
		cmImagePlacement.SelectedIndex = 0;
	}
	else	
	{
		cmImagePlacement.SelectedIndex = 0;
	}
	//Read the value from the variable userShowImages and set the default value for cmShowImages
	if (userShowImages.ToLower() == "true")
	{
		cmShowImages.SelectedIndex = 0;
	}
	else if (userShowImages.ToLower() == "false")
	{
		cmShowImages.SelectedIndex = 1;
	}
	else if (userShowImages.ToLower() == string.Empty)
	{
		cmShowImages.SelectedIndex = 0;
	}
	else
	{
		cmShowImages.SelectedIndex = 0;
	}
	//Read the value from the variable userShowNoImage and set the default value for cmImagePlaceholder
	if (userShowNoImage == "true")
	{
		cmImagePlaceholder.SelectedIndex = 0;
	}
	else if (userShowNoImage == "false")
	{
		cmImagePlaceholder.SelectedIndex = 1;
	}
	else if (userShowNoImage == string.Empty)
	{
		cmImagePlaceholder.SelectedIndex = 1;
	}	
	else
	{
		cmImagePlaceholder.SelectedIndex = 1;
	}
	//Read the value from the variable userNoImage and set the default value for tbImagePlaceholder
	if (userNoImage != string.Empty)
	{
		tbImagePlaceholder.Text = userNoImage;
	}
	
	
	//Read the value from the variable userShowLevelDesc and set the default value for cmShowLevelDesc
	if (userShowLevelDesc.ToLower() == "true")
	{
		cmShowLevelDesc.SelectedIndex = 0;
	}
	else if (userShowLevelDesc.ToLower() == "false")
	{
		cmShowLevelDesc.SelectedIndex = 1;
	}
	else
	{
		cmShowLevelDesc.SelectedIndex = 1;
	}
	//Read the value from the variable userPrettifyTitles and set the default value for cmPrettifyTitles
	if (userPrettifyTitles.ToLower() == "true")
	{
		cmPrettifyTitles.SelectedIndex = 0;
	}
	else if (userPrettifyTitles.ToLower() == "false")
	{
		cmPrettifyTitles.SelectedIndex = 1;
	}
	else
	{
		cmPrettifyTitles.SelectedIndex = 1;
	}
	//Read the value from the variable userShowImagesForCollections and set the default value for Collections in clbLevelDesc
	string collectionOrFonds = string.Empty;
	if (userCollectionOrFonds == string.Empty || userCollectionOrFonds.ToLower() == "fonds")
	{
		collectionOrFonds = "Fonds";
	}
	else if (userCollectionOrFonds.ToLower() == "collection")
	{
		collectionOrFonds = "Collection";
	}
	else
	{
		collectionOrFonds = "Fonds";
	}
	
	if (userShowImagesForCollections.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add(collectionOrFonds, true);
		
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add(collectionOrFonds, false);
	}
	
	//Read the value from the variable userShowImagesForSubgroups and set the default value for Subgroups in clbLevelDesc
	string subgroupOrSousfonds = string.Empty;
	if (userCollectionOrFonds == string.Empty || userCollectionOrFonds.ToLower() == "fonds")
	{
		subgroupOrSousfonds = "Sous-Fonds";
	}
	else if (userCollectionOrFonds.ToLower() == "collection")
	{
		subgroupOrSousfonds = "Subgroups";
	}
	else
	{
		subgroupOrSousfonds = "Sous-Fonds";
	}
	if (userShowImagesForSubgroups.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add(subgroupOrSousfonds, true);
		
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add(subgroupOrSousfonds, false);
	}
	//Read the value from the variable userShowImagesForSeries and set the default value for Series in clbLevelDesc
	if (userShowImagesForSeries.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Series", true);
		
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Series", false);
	}
	//Read the value from the variable userShowImagesForSubseries and set the default value for Subseries in clbLevelDesc
	if (userShowImagesForSubseries.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Sub-series", true);
		
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Sub-series", false);
	}
	//Read the value from the variable userShowImagesForSubsubseries and set the default value for Subsubseries in clbLevelDesc
	if (userShowImagesForSubsubseries.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Sub-sub-series", true);
		
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Sub-sub-series", false);
	}
	//Read the value from the variable userShowImagesForFiles and set the default value for Files in clbLevelDesc
	if (userShowImagesForFiles.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Files", true);
		
	}
	else if (userShowImagesForFiles.ToLower() == "false")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Files", false);
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Files", true);
		
	}
	//Read the value from the variable userShowImagesForFileparts and set the default value for Fileparts in clbLevelDesc
	if (userShowImagesForFileparts.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("File Parts", true);
		
	}
	else if (userShowImagesForFileparts.ToLower() == "false")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("File Parts", false);
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("File Parts", true);
		
	}
	//Read the value from the variable userShowImagesForItems and set the default value for Items in clbLevelDesc
	if (userShowImagesForItems.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Items", true);
		
	}
	else if (userShowImagesForItems.ToLower() == "false")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Items", false);
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Items", true);
		
	}
	//Read the value from the variable userShowImagesForComponents and set the default value for Components in clbLevelDesc
	if (userShowImagesForComponents.ToLower() == "true")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Components", true);
		
	}
	else if (userShowImagesForComponents.ToLower() == "false")
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Components", false);
	}
	else
	{
		((CheckedListBox)clbLevelDesc.Control).Items.Add("Components", true);
		
	}
	//Read the value from the variable userIndentImages and set the default value for cmIndentImages
	if (userIndentImages.ToLower() == "true")
	{
		cmIndentImages.SelectedIndex = 0;
	}
	else if (userIndentImages.ToLower() == "false")
	{
		cmIndentImages.SelectedIndex = 1;
	}
	else
	{
		cmIndentImages.SelectedIndex = 1;
	}
	//Read the value from the variable userLogo and set the default value for tbLogo
	if (userLogo != string.Empty)
	{
		tbLogo.Text = userLogo;
	}
	tbLogo_Leave(null, new System.EventArgs());
	//Read the value from the variable userNoImage and set the default value for tbImagePlaceholder
	if (userNoImage != string.Empty)
	{
		tbImagePlaceholder.Text = userNoImage;
	}
	tbImagePlaceholder_Leave(null, new System.EventArgs());
	
	cmImagePlacement_SelectedIndexChanged(null, new System.EventArgs());
	cmImagePlaceholder_SelectedIndexChanged(null, new System.EventArgs());
	cmShowImages_SelectedIndexChanged(null, new System.EventArgs());
	cmAddHyperlinks_SelectedIndexChanged(null, new System.EventArgs());	
	tbLogo.Control.ReadOnly = true;
	tbImagePlaceholder.Control.ReadOnly = true;
	formOptions.Control.ShowInTaskbar = true;
	//formOptions.Control.FormBorderStyle = FormBorderStyle.Sizable;
	formOptions.Control.BringToFront();
	//Check if hyperlinks should be enabled at all. If not, hide the hyperlink fields.
	if (enableHyperlinks != true)
	{
		gbHyperlinks.Visible = false;
		formOptions.Control.Size = new Size (formOptions.Control.Size.Width, formOptions.Control.Size.Height - gbHyperlinks.Size.Height);
		btRunReport.Control.Location = new Point(btRunReport.Control.Location.X, btRunReport.Control.Location.Y - gbHyperlinks.Size.Height);
	}	
}</LoadFormEvent>
      <Location>0, 0</Location>
      <Name>formOptions</Name>
      <Report isRef="0" />
      <Size>568, 608</Size>
      <Text>Options</Text>
    </formOptions>
  </Pages>
  <PrinterSettings Ref="106" type="Stimulsoft.Report.Print.StiPrinterSettings" isKey="true" />
  <ReferencedAssemblies isList="true" count="9">
    <value>System.Dll</value>
    <value>System.Drawing.Dll</value>
    <value>System.Windows.Forms.Dll</value>
    <value>System.Data.Dll</value>
    <value>System.Xml.Dll</value>
    <value>Stimulsoft.Controls.Dll</value>
    <value>Stimulsoft.Base.Dll</value>
    <value>Stimulsoft.Report.Dll</value>
    <value>Minisis.Report.dll</value>
  </ReferencedAssemblies>
  <ReportAlias>Report</ReportAlias>
  <ReportAuthor>MINISIS Inc</ReportAuthor>
  <ReportChanged>5/8/2019 9:59:13 AM</ReportChanged>
  <ReportCreated>2/19/2008 2:32:36 PM</ReportCreated>
  <ReportDescription>&lt;MinisisInfo&gt;&lt;Description /&gt;&lt;DataModel /&gt;&lt;Database /&gt;&lt;SortInfos /&gt;&lt;/MinisisInfo&gt;</ReportDescription>
  <ReportFile>F:\MINISIS\MD\Erie\M2A\USERDM\XML\FINDING_AID_GENERIC.MRT</ReportFile>
  <ReportGuid>428cc67b31294c03b463984802d4192b</ReportGuid>
  <ReportName>Report</ReportName>
  <ReportUnit>Inches</ReportUnit>
  <ReportVersion>2013.3.1800</ReportVersion>
  <Script>using System;
using System.Drawing;
using System.Windows.Forms;
using System.Data;
using Stimulsoft.Controls;
using Stimulsoft.Base.Drawing;
using Stimulsoft.Report;
using Stimulsoft.Report.Dialogs;
using Stimulsoft.Report.Components;
using Stimulsoft.Report.Dictionary;
using Minisis.Report;
using System.Collections;
using System.Globalization;
using System.IO;
namespace Reports
{
    
    public class Report : Stimulsoft.Report.StiReport
    {
        TreeView sortTree = new TreeView();
		
        public Report()
        {
            this.InitializeComponent();
			StiOptions.Engine.OldModeOfRenderingEventInEngineV2 = true;
			//StiOptions.Viewer.Windows.ShowBookmarksPanel = true;
        }
		
		public string getVersion ()
		{
			return "v1.2";
		}
		
		Hashtable refds = new Hashtable();
		Hashtable refdHighers = new Hashtable();
		public void prepRootNode (string refd, string refdHigher)
		{
			if (!String.IsNullOrEmpty(refd))
			{
				refds.Add(refd, null);
			}
			if (!String.IsNullOrEmpty(refdHigher))
			{
				refdHighers.Add(refd, null);
			}
		}
		
		public bool isRootNode (string refd, string refdHigher)
		{
			bool returnValue;
			if (String.IsNullOrEmpty(refdHigher))
			{
				returnValue = true;
			}
			else if (!refds.ContainsKey(refdHigher))
			{
				returnValue = true;
			}
			else
			{
				returnValue = false;
			}
			return returnValue;
		}
		
		public void setWatermark(bool enable, string text) 
		{
			if (enable &amp;&amp; text != null &amp;&amp; text.Length &gt; 0) {
				TitlePage_Watermark.Enabled = true;
				TitlePage_Watermark.Text = text;
				TableOfContents_Watermark.Enabled = true;
				TableOfContents_Watermark.Text = text;
				Collection_Watermark.Enabled = true;
				Collection_Watermark.Text = text;
				Subgroups_Watermark.Enabled = true;
				Subgroups_Watermark.Text = text;
			}
			else {
				TitlePage_Watermark.Enabled = false;
				TitlePage_Watermark.Text = "";
				TableOfContents_Watermark.Enabled = false;
				TableOfContents_Watermark.Text = "";
				Collection_Watermark.Enabled = false;
				Collection_Watermark.Text = "";
				Subgroups_Watermark.Enabled = false;
				Subgroups_Watermark.Text = "";
			}
		}
		
		public void addSortNode(string parentNode, string nodeKey, string nodeTitle)
		{
			TreeNode[] finder;
			TreeNode xnode = new TreeNode();
			
			if (isRootNode(nodeKey, parentNode))
			{
				if (userSortOrder.ToLower() == "refd")
				{
					sortTree.Nodes.Add(nodeKey, nodeKey);
				}
				else if (userSortOrder.ToLower() == "title")
				{
					sortTree.Nodes.Add(nodeKey, nodeTitle + " - " + nodeKey);
				}
			}
			else
			{
				finder = sortTree.Nodes.Find(parentNode, true);
				if (finder.Length &gt; 0)
				{
					xnode = finder[0];
					if (userSortOrder.ToLower() == "refd")
					{
						xnode.Nodes.Add(nodeKey, nodeKey);
					}
					else if (userSortOrder.ToLower() == "title")
					{
						xnode.Nodes.Add(nodeKey, nodeTitle + " - " + nodeKey);
					}
				}
			}
		}
		
		Hashtable sortOrder = new Hashtable();
		int iSort = 0;
		
		private void PrintRecursive(TreeNode treeNode)
		{
			// Print each node recursively.
			foreach (TreeNode tn in treeNode.Nodes)
			{
				iSort++;
				sortOrder.Add(tn.Name.ToString(), iSort);
				PrintRecursive(tn);
			}
		}
		
		public void createSortHashtable()
		{
			if (sortOrder.Count == 0)
			{
				sortTree.TreeViewNodeSorter = new AlphanumComparatorFast();
				sortTree.Sort();
				TreeNodeCollection nodes = sortTree.Nodes;
				
				foreach (TreeNode n in nodes)
				{
					sortOrder.Add(n.Name.ToString(), iSort);
					PrintRecursive(n);
				}
			}
		}
		
		public int getSortOrder(string refd)
		{
			return (int)sortOrder[refd];
		}
		
		
		public string getHyperlink(string refd, string sisn, string hyperlink, string activateExternalHyperlinks)
		{
			string returnValue = string.Empty;	
			string identifier = string.Empty;
			if (enableHyperlinks == true &amp;&amp; activateExternalHyperlinks.ToLower() == "true" &amp;&amp; hyperlink != string.Empty)
			{
				if (userUrlIdentifier == "SISN" &amp;&amp; sisn != string.Empty)
				{
					identifier = sisn;
				}
				else if (userUrlIdentifier == "REFD" &amp;&amp; refd != string.Empty)
				{
					identifier = refd;
				}
				returnValue = hyperlink.Replace("@", identifier);
			}
			return returnValue;
		}
		
		public string getStringInBetween(string strBegin, string strEnd, string strSource, bool includeBegin, bool includeEnd)           
		{
			string result = "";
			int iIndexOfBegin = strSource.IndexOf(strBegin);
			if (iIndexOfBegin != -1)
			{
				// include the Begin string if desired
				if (includeBegin)
				{
					iIndexOfBegin -= strBegin.Length;
				}
				strSource = strSource.Substring(iIndexOfBegin + strBegin.Length);
				int iEnd = strSource.IndexOf(strEnd);
				if (iEnd != -1)
				{
					// include the End string if desired
					if (includeEnd)
					{
						iEnd += strEnd.Length;
					}
					result = strSource.Substring(0, iEnd);
					// advance beyond this segment
					//if (iEnd + strEnd.Length &lt; strSource.Length)
					//	result[1] = strSource.Substring(iEnd
					//		+ strEnd.Length);
				}
			}
			return result;
		}
			
		public string initCap(string text)
		{
			//return new CultureInfo("en").TextInfo.ToTitleCase(text.ToLower());
			return new CultureInfo("en").TextInfo.ToTitleCase(text);
		}
		
		public bool showInToc(string refd, string tocLevels)
		{
			int levelsInToc;
			int.TryParse(tocLevels, out levelsInToc);
			
			//ArrayList temp = new ArrayList();
			int level = (int)getLevel(refd);
			bool returnValue = false;;
			if (level &lt;= levelsInToc)
			{
				returnValue = true;
			}
			else if (level &gt; levelsInToc)
			{
				returnValue = false;
			}
			return returnValue;
		}
		
		
		
		
		//Variables to hold the dimensions of the userNoImage image
		double noImageWidth = 0.00;
		double noImageHeight = 0.00;
		
		public string getLogo()
		{
			string returnValue = string.Empty;
			if (userShowImages == "true" &amp;&amp; (userLogo != string.Empty))
			{
				returnValue = userLogo;
			}
			return returnValue;
		}
		
		public bool getImageDimensions(string imagePath, out double width, out double height, double maxWidth, double maxHeight)
		{
			bool returnValue;
			try
			{
				System.Drawing.Image objImage = System.Drawing.Image.FromFile(imagePath);
            	// Get the Width and Height
            	width = objImage.Width;
            	height = objImage.Height;
			
				if (width &gt; maxWidth || height &gt; maxHeight)
				{
					double widthRatio = width / maxWidth;
					double heightRatio = height / maxHeight;
					double ratio = Math.Max(widthRatio, heightRatio);
					width = (width / ratio);
					height = (height / ratio);
				}
				if (height &gt; width)
				{
					width = maxWidth;
				}
				returnValue = true;
				objImage = null;
			}
			catch (Exception)
			{
				returnValue = false;
				width = 0;
				height = 0;
			}
			return returnValue;
		}
			
		
		public void runReport(string indentation, string showNoImage, string noImage, string showImages, string imagePlacement, string showLevelDesc, string indentImages, object[] checkedItems, string levelsInToc, string levelsInBookmarks, string logo, string addHyperlinks, string urlIdentifier, string hyperlink, string sortOrder, string prettifyTitles)
		{
			userIndentation = indentation;
			userLevelsInToc = levelsInToc;
			userLevelsInBookmarks = levelsInBookmarks;
			userShowNoImage = showNoImage;
			userNoImage = noImage;
			userShowImages = showImages;
			userImagePlacement = imagePlacement;
			userShowLevelDesc = showLevelDesc;
			userIndentImages = indentImages;
			userLogo = logo;
			userActivateExternalHyperlinks = addHyperlinks;
			userUrlIdentifier = urlIdentifier;
			userHyperlink = hyperlink;
			userSortOrder = sortOrder;
			userPrettifyTitles = prettifyTitles;
			
			setShowImagesForLevels(checkedItems);
			
			
			//Run the report
			formOptions.Visible = false;;
			StiOptions.Viewer.Windows.ShowBookmarksPanel = true;
			
			
			this.TitlePage.Report.Render();
		}
		
		public bool isItemLevel(string level)
		{
			bool returnValue = false;
			if (level.ToLower() == "file")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "file part")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "item")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "component")
			{
				returnValue = true;
			}
			
			return returnValue;
		}
		
		public bool getShowImagesForLevel(string level)
		{
			bool returnValue = false;
			if (level.ToLower() == "collection" &amp;&amp; userShowImagesForCollections == "true")
			{
				returnValue = true;
			}
			if (level.ToLower() == "fonds" &amp;&amp; userShowImagesForCollections == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "subgroup" &amp;&amp; userShowImagesForSubgroups == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "sous-fonds" &amp;&amp; userShowImagesForSubgroups == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "subfonds" &amp;&amp; userShowImagesForSubgroups == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "series" &amp;&amp; userShowImagesForSeries == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "sub-series" &amp;&amp; userShowImagesForSubseries == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "subseries" &amp;&amp; userShowImagesForSubseries == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "sub-sub-series" &amp;&amp; userShowImagesForSubsubseries == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "file" &amp;&amp; userShowImagesForFiles == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "file part" &amp;&amp; userShowImagesForFileparts == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "item" &amp;&amp; userShowImagesForItems == "true")
			{
				returnValue = true;
			}
			else if (level.ToLower() == "component" &amp;&amp; userShowImagesForComponents == "true")
			{
				returnValue = true;
			}
			return returnValue;
		}
				
		
		public void setShowImagesForLevels(object[] checkedLevels)
		{
			userShowImagesForCollections = "false";
			userShowImagesForSubgroups = "false";
			userShowImagesForSeries = "false";
			userShowImagesForSubseries = "false";
			userShowImagesForSubsubseries = "false";
			userShowImagesForFiles = "false";
			userShowImagesForFileparts = "false";
			userShowImagesForItems = "false";
			userShowImagesForComponents = "false";
			
			foreach (string level in checkedLevels)
			{
				if (level.ToLower() == "collections")
				{
					userShowImagesForCollections = "true";
				}
				if (level.ToLower() == "fonds")
				{
					userShowImagesForCollections = "true";
				}
				else if (level.ToLower() == "subgroups")
				{
					userShowImagesForSubgroups = "true";
				}
				else if (level.ToLower() == "sous-fonds")
				{
					userShowImagesForSubgroups = "true";
				}
				else if (level.ToLower() == "subfonds")
				{
					userShowImagesForSubgroups = "true";
				}
				else if (level.ToLower() == "series")
				{
					userShowImagesForSeries = "true";
				}
				else if (level.ToLower() == "sub-series")
				{
					userShowImagesForSubseries = "true";
				}
				else if (level.ToLower() == "subseries")
				{
					userShowImagesForSubseries = "true";
				}
				else if (level.ToLower() == "sub-sub-series")
				{
					userShowImagesForSubsubseries = "true";
				}
				else if (level.ToLower() == "files")
				{
					userShowImagesForFiles = "true";
				}
				else if (level.ToLower() == "file parts")
				{
					userShowImagesForFileparts = "true";
				}
				else if (level.ToLower() == "items")
				{
					userShowImagesForItems = "true";
				}
				else if (level.ToLower() == "components")
				{
					userShowImagesForSubgroups = "true";
				}
			}
		}
		
		public string getTitle(string levelDesc, string title, string showLevelDesc, string refd, string datesOfCreation, string physicalDesc, string boxNo)
		{
			string returnValue = string.Empty;
			
			if (isItemLevel(levelDesc)) 
			{
				if (showLevelDesc == "true")
				{
					returnValue = initCap(levelDesc) + " - " + refd + " " + title;
				}
				else if (showLevelDesc == "false")
				{
					returnValue = refd + " " + title;
				}
				if (datesOfCreation != string.Empty)
				{
					returnValue = returnValue + ". -- " + datesOfCreation;
				}
				if (physicalDesc != string.Empty)
				{
					returnValue = returnValue + ". -- " + physicalDesc;
				}
				if (boxNo != string.Empty)
				{
					returnValue = returnValue + ". -- Box Number " + boxNo;
				}
			}
			else 
			{
				if (showLevelDesc == "true")
				{
					returnValue = initCap(levelDesc) + " - " + refd + " " + title;
				}
				else if (showLevelDesc == "false")
				{
					returnValue = refd + " " + title;
				}
				if (datesOfCreation != string.Empty)
				{
					returnValue = returnValue + ". \n" + datesOfCreation;
				}
				if (physicalDesc != string.Empty)
				{
					returnValue = returnValue + ". \n" + physicalDesc;
				}
			}
			//Check value of userPrettifyTitles to determine whether titles need to be prettified
			if (userPrettifyTitles == "true")
			{
				returnValue = initCap(returnValue);
			}
			//MessageBox.Show("GetTitle: " + returnValue);
			return returnValue;
		}
		public string getTitle(string levelDesc, string title, string showLevelDesc, string refd)
		{
			string returnValue = string.Empty;
			if (showLevelDesc == "true")
			{
				returnValue = initCap(levelDesc) + " \n" + refd + " " + title;
			}
			else if (showLevelDesc == "false")
			{
				returnValue = refd + " " + title;
			}
			//Check value of userPrettifyTitles to determine whether titles need to be prettified
			if (userPrettifyTitles == "true")
			{
				returnValue = initCap(returnValue);
			}
			return returnValue;
		}
		public string getTitle(string title, string datesOfCreation, string physicalDesc)
		{
			string returnValue = string.Empty;
			returnValue = title;
			if (datesOfCreation != string.Empty)
			{
				returnValue = returnValue + ". \n" + datesOfCreation;
			}
			if (physicalDesc != string.Empty)
			{
				returnValue = returnValue + ". \n" + physicalDesc;
			}
			//Check value of userPrettifyTitles to determine whether titles need to be prettified
			if (userPrettifyTitles == "true")
			{
				returnValue = initCap(returnValue);
			}
			return returnValue;
		}
			
		
		public string getImage(string imageUrl, string levelDesc)
		{                                              
			string returnValue = string.Empty;
			if (imageUrl != string.Empty &amp;&amp; userShowImages == "true" &amp;&amp; getShowImagesForLevel(levelDesc))
        	{
				imageUrl = imageUrl.Trim();
				string url = imageUrl.ToLower();
				if (url.StartsWith("http://") || url.StartsWith("https://")) {
					returnValue = imageUrl;
				}
				else {
					//System.Windows.Forms.MessageBox.Show(imageUrl);
					returnValue = "file:///" + imageUrl.Replace("\\", "/");
					//System.Windows.Forms.MessageBox.Show(returnValue);
				}
        	}
			else if (userShowImages == "true" &amp;&amp; userShowNoImage == "true" &amp;&amp; userNoImage != string.Empty &amp;&amp; getShowImagesForLevel(levelDesc))
			{
				if (!userNoImage.ToLower().StartsWith("http://"))
				{
					returnValue = "file:///" + userNoImage.Replace("\\", "/");
				}
				else
				{
					returnValue = userNoImage;
				}
			}
        	return returnValue;
		}
		
		public int getUserIndentation()
		{
			string temp = userIndentation;
			int returnValue = -1;
			int.TryParse(temp, out returnValue);
			//Make sure there is a value
			if (returnValue &lt; 0)
			{
				returnValue = 3;
				
			}
			else if (returnValue &gt; 10)
			{
				returnValue = 3;
			}
			return returnValue;
		}
		
		//Code for keeping track of the dynamic levels
		Hashtable levels = new Hashtable();
			
		public void determineLevel(string refd, string title, string refdHigher, string levelDesc, string showLevelDesc)
		{
			double level = 0;
			string newTitle = string.Empty;	
			
			ArrayList temp = new ArrayList();
			if (showLevelDesc.ToLower() == "true")
			{
				newTitle = initCap(levelDesc) + " - ";
			}
			//newTitle = newTitle + refd + " " + initCap(title);
			newTitle = newTitle + refd + " " + title;
					
			temp.Add(newTitle);
			temp.Add(refdHigher);
			//if (!String.IsNullOrEmpty(refdHigher))
			if (!isRootNode(refd, refdHigher))
			{
				level = getLevel(refdHigher);
				level = level + 1;
			}
			temp.Add(level);
			levels.Add(refd,temp);
		}
		
		public double getLevel(string refd)
		{
			double returnValue = -1;
			ArrayList temp = new ArrayList();
			temp = (ArrayList)levels[refd];
			object levelRefdHigher = temp[2];	
			
			if (levelRefdHigher != null)
			{
				returnValue = (double)levelRefdHigher;
			}			
			return returnValue;
		}
		
		public class AlphanumComparatorFast : IComparer
		{
			public int Compare(object x, object y)
			{
				string s1 = ((TreeNode)x).Text as string;
				if (s1 == null)
				{
					return 0;
				}
				string s2 = ((TreeNode)y).Text as string;
				if (s2 == null)
				{
					return 0;
				}
				int len1 = s1.Length;
				int len2 = s2.Length;
				int marker1 = 0;
				int marker2 = 0;
				// Walk through two the strings with two markers.
				while (marker1 &lt; len1 &amp;&amp; marker2 &lt; len2)
				{
					char ch1 = s1[marker1];
					char ch2 = s2[marker2];
					// Some buffers we can build up characters in for each chunk.
					char[] space1 = new char[len1];
					int loc1 = 0;
					char[] space2 = new char[len2];
					int loc2 = 0;
					// Walk through all following characters that are digits or
					// characters in BOTH strings starting at the appropriate marker.
					// Collect char arrays.
					do
					{
						space1[loc1++] = ch1;
						marker1++;
						if (marker1 &lt; len1)
						{
							ch1 = s1[marker1];
						}
						else
						{
							break;
						}
					} while (char.IsDigit(ch1) == char.IsDigit(space1[0]));
					do
					{
						space2[loc2++] = ch2;
						marker2++;
						if (marker2 &lt; len2)
						{
							ch2 = s2[marker2];
						}
						else
						{
							break;
						}
					} while (char.IsDigit(ch2) == char.IsDigit(space2[0]));
					// If we have collected numbers, compare them numerically.
					// Otherwise, if we have strings, compare them alphabetically.
					string str1 = new string(space1);
					string str2 = new string(space2);
					int result;
					if (char.IsDigit(space1[0]) &amp;&amp; char.IsDigit(space2[0]))
					{
						int thisNumericChunk = int.Parse(str1);
						int thatNumericChunk = int.Parse(str2);
						result = thisNumericChunk.CompareTo(thatNumericChunk);
					}
					else
					{
						result = str1.CompareTo(str2);
					}
					if (result != 0)
					{
						return result;
					}
				}
				return len1 - len2;
			}
		}
		
		public void addTopLevelBookmark(string label, string bookmarkLevels)
		{
			int levelsInBookmarks;
			int.TryParse(bookmarkLevels, out levelsInBookmarks);
			if (levelsInBookmarks &gt; 0)
			{
				Bookmark.Add(label);
				Text6.BookmarkValue = label;
			}
		}
		
		public void addNewBookmark(string refd, string level_desc, string title, string bookmarkLevels)
		{
			string currentLevelTitle = string.Empty;	
			ArrayList temp = new ArrayList();
			int level = (int)getLevel(refd);
			
			int levelsInBookmarks;
			int.TryParse(bookmarkLevels, out levelsInBookmarks);
			
			currentLevelTitle = title;
			currentLevelTitle = getTitle(level_desc, title, userShowLevelDesc, refd);
			if (level == 1 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				Bookmark.Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 2 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;
				temp = new ArrayList();
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				//Bookmark the title from one level up
				Bookmark[titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 3 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;			
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();	
				//Bookmark the title from two levels up
				Bookmark[titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 4 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();	
				//Bookmark the title from three levels up
				Bookmark[titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 5 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				string refdFourLevelsUp = string.Empty;
				string titleFourLevelsUp = string.Empty;	
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();
				refdFourLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from four levels up
				temp = (ArrayList)levels[refdFourLevelsUp];
				titleFourLevelsUp = temp[0].ToString();
				//Bookmark the title from four levels up
				Bookmark[titleFourLevelsUp][titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 6 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				string refdFourLevelsUp = string.Empty;
				string titleFourLevelsUp = string.Empty;
				string refdFiveLevelsUp = string.Empty;
				string titleFiveLevelsUp = string.Empty;	
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();
				refdFourLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from four levels up
				temp = (ArrayList)levels[refdFourLevelsUp];
				titleFourLevelsUp = temp[0].ToString();
				refdFiveLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from five levels up
				temp = (ArrayList)levels[refdFiveLevelsUp];
				titleFiveLevelsUp = temp[0].ToString();
				//Bookmark the title from five levels up
				Bookmark[titleFiveLevelsUp][titleFourLevelsUp][titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 7 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				string refdFourLevelsUp = string.Empty;
				string titleFourLevelsUp = string.Empty;
				string refdFiveLevelsUp = string.Empty;
				string titleFiveLevelsUp = string.Empty;
				string refdSixLevelsUp = string.Empty;
				string titleSixLevelsUp = string.Empty;
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();
				refdFourLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from four levels up
				temp = (ArrayList)levels[refdFourLevelsUp];
				titleFourLevelsUp = temp[0].ToString();
				refdFiveLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from five levels up
				temp = (ArrayList)levels[refdFiveLevelsUp];
				titleFiveLevelsUp = temp[0].ToString();
				refdSixLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from six levels up
				temp = (ArrayList)levels[refdSixLevelsUp];
				titleSixLevelsUp = temp[0].ToString();
				//Bookmark the title from six levels up
				Bookmark[titleSixLevelsUp][titleFiveLevelsUp][titleFourLevelsUp][titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 8 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				string refdFourLevelsUp = string.Empty;
				string titleFourLevelsUp = string.Empty;
				string refdFiveLevelsUp = string.Empty;
				string titleFiveLevelsUp = string.Empty;
				string refdSixLevelsUp = string.Empty;
				string titleSixLevelsUp = string.Empty;
				string refdSevenLevelsUp = string.Empty;
				string titleSevenLevelsUp = string.Empty;
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();
				refdFourLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from four levels up
				temp = (ArrayList)levels[refdFourLevelsUp];
				titleFourLevelsUp = temp[0].ToString();
				refdFiveLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from five levels up
				temp = (ArrayList)levels[refdFiveLevelsUp];
				titleFiveLevelsUp = temp[0].ToString();
				refdSixLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from six levels up
				temp = (ArrayList)levels[refdSixLevelsUp];
				titleSixLevelsUp = temp[0].ToString();
				refdSevenLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from seven levels up
				temp = (ArrayList)levels[refdSevenLevelsUp];
				titleSevenLevelsUp = temp[0].ToString();
				//Bookmark the title from seven levels up
				Bookmark[titleSevenLevelsUp][titleSixLevelsUp][titleFiveLevelsUp][titleFourLevelsUp][titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
			else if (level == 9 &amp;&amp; level &lt;= levelsInBookmarks)
			{
				string refdOneLevelUp = string.Empty;
				string titleOneLevelUp = string.Empty;	
				string refdTwoLevelsUp = string.Empty;
				string titleTwoLevelsUp = string.Empty;		
				string refdThreeLevelsUp = string.Empty;
				string titleThreeLevelsUp = string.Empty;
				string refdFourLevelsUp = string.Empty;
				string titleFourLevelsUp = string.Empty;
				string refdFiveLevelsUp = string.Empty;
				string titleFiveLevelsUp = string.Empty;
				string refdSixLevelsUp = string.Empty;
				string titleSixLevelsUp = string.Empty;
				string refdSevenLevelsUp = string.Empty;
				string titleSevenLevelsUp = string.Empty;
				string refdEightLevelsUp = string.Empty;
				string titleEightLevelsUp = string.Empty;
				//Get the current level
				temp = (ArrayList)levels[refd];
				//Get the REFD_HIGHER from one level up
				refdOneLevelUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from one level up
				temp = (ArrayList)levels[refdOneLevelUp];
				//Get the title from one level up
				titleOneLevelUp = temp[0].ToString();
				refdTwoLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from two levels up
				temp = (ArrayList)levels[refdTwoLevelsUp];
				titleTwoLevelsUp = temp[0].ToString();
				refdThreeLevelsUp = temp[1].ToString();
				temp = new ArrayList();
				//Get the information from three levels up
				temp = (ArrayList)levels[refdThreeLevelsUp];
				titleThreeLevelsUp = temp[0].ToString();
				refdFourLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from four levels up
				temp = (ArrayList)levels[refdFourLevelsUp];
				titleFourLevelsUp = temp[0].ToString();
				refdFiveLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from five levels up
				temp = (ArrayList)levels[refdFiveLevelsUp];
				titleFiveLevelsUp = temp[0].ToString();
				refdSixLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from six levels up
				temp = (ArrayList)levels[refdSixLevelsUp];
				titleSixLevelsUp = temp[0].ToString();
				refdSevenLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from seven levels up
				temp = (ArrayList)levels[refdSevenLevelsUp];
				titleSevenLevelsUp = temp[0].ToString();
				refdEightLevelsUp = temp[1].ToString();	
				temp = new ArrayList();
				//Get the information from eight levels up
				temp = (ArrayList)levels[refdEightLevelsUp];
				titleEightLevelsUp = temp[0].ToString();
				//Bookmark the title from seven levels up
				Bookmark[titleEightLevelsUp][titleSevenLevelsUp][titleSixLevelsUp][titleFiveLevelsUp][titleFourLevelsUp][titleThreeLevelsUp][titleTwoLevelsUp][titleOneLevelUp].Add(currentLevelTitle);
				Text19.BookmarkValue = currentLevelTitle;
			}
		}
		
		
		public string ProcessBookmark2(String Title, String LevelDesc)
		{
			string BookmarkExp;
			BookmarkExp = "";
			StiBookmarkExpression Exp = new StiBookmarkExpression();
			if (LevelDesc.ToLower() == "subgroup" || LevelDesc.ToLower() == "sous-fonds" || LevelDesc.ToLower() == "subfonds")
			{
				BookmarkSubgroup = Title;
				BookmarkSeries = "";
				BookmarkSubseries = "";
				BookmarkSubsubseries = "";
				
				BookmarkExp = "{" + BookmarkSubgroup + "}";
				Bookmark.Add(BookmarkSubgroup);
				Exp.Value = BookmarkSubgroup;
				Data6.Bookmark = Exp;
				
				return Title;
				
			}
			else if (LevelDesc.ToLower() == "series")
			{
				BookmarkSeries = Title;
				BookmarkSubseries = "";
				BookmarkSubsubseries = "";
				
				if (BookmarkSubgroup != "")
				{
					Bookmark[BookmarkSubgroup].Add(BookmarkSeries);
				}
				else
				{
					Bookmark.Add(BookmarkSeries);
				}
				return Title;
			}
			else if (LevelDesc.ToLower() == "sub-series" || LevelDesc.ToLower() == "subseries")
			{
				BookmarkSubseries = Title;
				BookmarkSubsubseries = "";
				if (BookmarkSubgroup != "" &amp;&amp; BookmarkSeries != "")
				{
					Bookmark[BookmarkSubgroup][BookmarkSeries].Add(BookmarkSubseries);
				}
				else if (BookmarkSubgroup == "" &amp;&amp; BookmarkSeries != "")
				{
					Bookmark[BookmarkSeries].Add(BookmarkSubseries);
				}
				else if (BookmarkSubgroup != "" &amp;&amp; BookmarkSeries == "")
				{
					Bookmark[BookmarkSubgroup].Add(BookmarkSubseries);
				}
				else
				{
					Bookmark.Add(BookmarkSubseries);
				}
				return Title;
			}
			else
				return null;
		}
		
		public string ProcessBookmark(String SISN, String Title, String LevelDesc)
		{
			string BookmarkExp;
			BookmarkExp = "";
			StiBookmarkExpression Exp = new StiBookmarkExpression();
			if (LevelDesc.ToLower() == "subgroup" || LevelDesc.ToLower() == "sous-fonds" || LevelDesc.ToLower() == "subfonds")
			{
				BookmarkSubgroup = Title;
				BookmarkSeries = "";
				BookmarkSubseries = "";
				BookmarkSubsubseries = "";
				
				BookmarkExp = "{" + BookmarkSubgroup + "}";
				Bookmark.Add(BookmarkSubgroup);
				Exp.Value = BookmarkSubgroup;
				Data6.Bookmark = Exp;
				
				return SISN;
				
			}
			else if (LevelDesc.ToLower() == "series")
			{
				BookmarkSeries = Title;
				BookmarkSubseries = "";
				BookmarkSubsubseries = "";
				
				if (BookmarkSubgroup != "")
				{
					Bookmark[BookmarkSubgroup].Add(BookmarkSeries);
				}
				else
				{
					Bookmark.Add(BookmarkSeries);
				}
				return SISN;
			}
			else if (LevelDesc.ToLower() == "sub-series" || LevelDesc.ToLower() == "subseries")
			{
				BookmarkSubseries = Title;
				BookmarkSubsubseries = "";
				if (BookmarkSubgroup != "" &amp;&amp; BookmarkSeries != "")
				{
					Bookmark[BookmarkSubgroup][BookmarkSeries].Add(BookmarkSubseries);
				}
				else if (BookmarkSubgroup == "" &amp;&amp; BookmarkSeries != "")
				{
					Bookmark[BookmarkSeries].Add(BookmarkSubseries);
				}
				else if (BookmarkSubgroup != "" &amp;&amp; BookmarkSeries == "")
				{
					Bookmark[BookmarkSubgroup].Add(BookmarkSubseries);
				}
				else
				{
					Bookmark.Add(BookmarkSubseries);
				}
				return SISN;
			}
			else
				return null;
		}
		
		OpenFileDialog openDataFile = new OpenFileDialog();
		//Define all the global variables that have no meaning to the user
		public string userHyperlink = "";
		public string userUrlIdentifier = "SISN";
		public string userActivateExternalHyperlinks = "true";
		public bool enableHyperlinks = true;
		public int NumberOfCollections = 0;
        public int NumberOfSubgroups = 0;
        public int NumberOfSeries = 0;
        public int NumberOfSubseries = 0;
        public int NumberOfSubsubseries = 0;
        public int LevelOfSubgroups = 0;
        public int LevelOfSeries = 0;
        public int LevelOfSubseries = 0;
        public int LevelOfSubsubseries = 0;
        public string BookmarkLevel;
        public string BookmarkName;
        public string BookmarkSubgroup;
        public string BookmarkSeries;
        public string BookmarkSubseries;
        public string BookmarkSubsubseries;
        public double Text19OriginalWidth = 7.10;
        public double Text19OriginalLeft = 0.3;
        public int NumberOfFiles = 0;
        public int LevelOfFiles = 0;
        public int NumberOfFileparts = 0;
        public int LevelOfFileparts = 0;
        public int NumberOfItems = 0;
        public int LevelOfItems = 0;
        public int NumberOfComponents = 0;
        public int LevelOfComponents = 0;
        public double Text14OriginalMaxWidth = 6.20;
        public double Text14OriginalLeft= 0.3;
        public double Text21OriginalWidth = 7.1;
        public bool ImagesFound = false;
		public virtual string Indentation
        {
            get
            {
                return "";
            }
        }
        
        public virtual double ImagesWidth
        {
            get
            {
                return 1.90d;
            }
        }
		
        #region StiReport Designer generated code - do not modify
		#endregion StiReport Designer generated code - do not modify
    }
}</Script>
  <ScriptLanguage>CSharp</ScriptLanguage>
  <Styles isList="true" count="1">
    <Style1 Ref="107" type="Stimulsoft.Report.StiStyle" isKey="true">
      <Brush>Transparent</Brush>
      <Conditions isList="true" count="0" />
      <Description />
      <Font>Arial,8</Font>
      <Name>Style1</Name>
      <TextBrush>Black</TextBrush>
    </Style1>
  </Styles>
</StiSerializer>
***END***
